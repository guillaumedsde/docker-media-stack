%YAML 1.1
---
# THE MEDIA STACK #
# this docker-compose file will get a selection of media downloading/management webapps
# I've tried to simplify getting started as much as possible
#   1. configure your desired variables in the .env file
#   2. run `docker compose up -d` from the folder with this docker-copose.yml folder
# NOTE this process is not fully automated and individual configuration of webapps is still required after docker compose

version: "3.9"

# basic common configuration for most containers
x-conf: &conf
  TZ: ${TZ}
  PGID: ${GID}
  PUID: ${UID}

# container restart policy
x-common: &common
  restart: always
  logging:
    driver: "local"
    options:
      max-file: "5"
      max-size: "10m"

# Traefik
x-traefik: &traefik
  traefik.enable: "true"

services:
  # reverse proxy
  traefik:
    image: traefik:v2.11
    user: ${UID}:${GID}
    depends_on:
      docker-socket-proxy:
        condition: service_healthy
    cap_add:
      - NET_BIND_SERVICE
    command:
      - "--global.checknewversion=false"
      - "--global.sendanonymoususage=false"
      - "--log.level=${TRAEFIK_LOG_LEVEL:-INFO}"
      # docker configuration
      - "--providers.docker=true"
      - "--providers.docker.endpoint=tcp://docker-socket-proxy:2375"
      - "--providers.docker.network=traefik"
      - "--providers.docker.exposedbydefault=false"
      # entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls.certResolver=le"
      - "--entrypoints.websecure.http.tls.domains[0].main=${root_domain}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.${root_domain}"
      # DNS challenge
      - "--certificatesresolvers.le=true"
      - "--certificatesresolvers.le.acme.storage=/traefik/acme.json"
      - "--certificatesresolvers.le.acme.dnschallenge=true"
      - "--certificatesresolvers.le.acme.dnschallenge.delayBeforeCheck=30"
      - "--certificatesresolvers.le.acme.dnschallenge.provider=ovh"
      - "--certificatesresolvers.le.acme.email=${letsencrypt_email}"
      - "--certificatesresolvers.le.acme.keytype=EC384"
      - "--certificatesresolvers.le.acme.dnsChallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
      # configs
      - "--providers.file.directory=/config/"
      # traefik API and dashboard
      - "--api=true"
      - "--api.dashboard=true"
      # traefik healthcheck
      - "--ping=true"
      - "--ping.manualrouting=true"
      # traefik access logs
      # - "--accesslog=true"
    environment:
      OVH_ENDPOINT: ${OVH_ENDPOINT}
      OVH_APPLICATION_KEY: ${OVH_APPLICATION_KEY}
      OVH_APPLICATION_SECRET: ${OVH_APPLICATION_SECRET}
      OVH_CONSUMER_KEY: ${OVH_CONSUMER_KEY}
      LEGO_EXPERIMENTAL_CNAME_SUPPORT: "true"
    labels:
      <<: *traefik
      # Dashboard
      traefik.http.routers.dashboard.rule: Host(`traefik.${root_domain}`)
      traefik.http.routers.dashboard.service: api@internal
      traefik.http.routers.dashboard.middlewares: traefik-forward-auth
      # Healthcheck
      traefik.http.routers.ping.rule: Host(`ping.${root_domain}`)
      traefik.http.routers.ping.service: ping@internal
    read_only: true
    volumes:
      - ${docker_data_folder}/traefik/data:/traefik
      - ./config/traefik:/config:ro
      - ${docker_data_folder}/traefik/plugins-storage:/plugins-storage
    tmpfs:
      - "/tmp"
    networks:
      - traefik
      - homer
      - nextcloud-proxy
      - robots
      - netdata
      - scrutiny
      - lam
      - authelia-proxy
      - photoprism-proxy
      - docker-socket-proxy
      - librespeed
      - smokeping
    <<: *common
    mem_limit: 500M
    memswap_limit: 500M
    cpu_count: 4
    ports:
      - 80:80
      - 443:443

  docker-socket-proxy:
    image: tecnativa/docker-socket-proxy:0.1
    user: ${UID}:${docker_group_id}
    cpu_count: 2
    mem_limit: 100M
    memswap_limit: 200M
    read_only: true
    tmpfs:
      - /run:mode=770,size=1k,uid=${UID},gid=${docker_group_id}
      - /var/lib/haproxy:mode=770,size=1k,uid=${UID},gid=${docker_group_id}
    <<: *common
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      CONTAINERS: "1"
      INFO: "1"
    networks:
      - docker-socket-proxy
    healthcheck:
      test:
        - CMD
        - nc
        - -z
        - "127.0.0.1"
        - "2375"
      interval: 30s
      timeout: 6s
      retries: 3
      start_period: 5s

  # watchtower container to update images
  # NOTE to update the containers images' watchtower needs to restart the containers this implies some downtime when it does
  # NOTE watchtower also updates itself
  watchtower:
    image: containrrr/watchtower:latest
    <<: *common
    mem_limit: 100m
    memswap_limit: 200M
    cpu_count: 1
    read_only: true
    user: ${UID}:${docker_group_id}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - watchtower
    command:
      - "--cleanup"
      - "--schedule"
      - "0 0 5 * * *"

  # Wireguard VPN client
  wireguard:
    <<: *common
    image: docker.io/qmcgaw/gluetun:v3.38.0
    # NOTE: hardcode container name in order for watchtower label:
    #       com.centurylinklabs.watchtower.depends-on
    #       to work as expected
    container_name: wireguard
    cap_add:
      - NET_ADMIN
    cpu_count: 4
    mem_limit: 250M
    memswap_limit: 250M
    sysctls:
      net.ipv6.conf.all.disable_ipv6: 0
    volumes:
      - type: bind
        source: ${docker_data_folder}/gluetun
        target: /gluetun
    networks:
      traefik:
        aliases:
          - jackett
          - qbittorrent
          - prowlarr
      flaresolverr:
    environment:
      <<: *conf
      LOG_LEVEL: ${GLUETUN_LOG_LEVEL:-info}
      VPN_SERVICE_PROVIDER: ${VPN_SERVICE_PROVIDER}
      VPN_TYPE: wireguard
      SERVER_COUNTRIES: ${VPN_SERVER_COUNTRIES}
      WIREGUARD_PRIVATE_KEY: ${WIREGUARD_PRIVATE_KEY}
      WIREGUARD_PRESHARED_KEY: ${WIREGUARD_PRESHARED_KEY}
      WIREGUARD_ADDRESSES: ${WIREGUARD_ADDRESSES}
      FIREWALL_VPN_INPUT_PORTS: ${FIREWALL_VPN_INPUT_PORTS}
      # Allow LAN access to other containers
      FIREWALL_OUTBOUND_SUBNETS: ${FIREWALL_OUTBOUND_SUBNETS}
      DNS_KEEP_NAMESERVER: "on"
      VERSION_INFORMATION: "off"
      HEALTH_SUCCESS_WAIT_DURATION: "10m"
    labels:
      <<: *traefik
      # NOTE: See FIXME above
      # traefik.docker.network: traefik
      # Prowlarr
      # service
      traefik.http.services.prowlarr.loadbalancer.server.port: "9696"
      # Router
      traefik.http.routers.prowlarr.rule: Host(`prowlarr.${root_domain}`)
      traefik.http.routers.prowlarr.service: prowlarr
      # Forward auth
      traefik.http.routers.prowlarr.middlewares: authelia@docker
      # Jackett
      # service
      traefik.http.services.jackett.loadbalancer.server.port: "9117"
      # Router
      traefik.http.routers.jackett.rule: Host(`jackett.${root_domain}`)
      traefik.http.routers.jackett.service: jackett
      # Forward auth
      traefik.http.routers.jackett.middlewares: authelia@docker
      # qBittorrent
      # service
      traefik.http.services.qbittorrent.loadbalancer.server.port: "8080"
      # router
      traefik.http.routers.qbittorrent.rule: Host(`torrent.${root_domain}`)
      traefik.http.routers.qbittorrent.service: qbittorrent
      # Forward auth
      traefik.http.routers.qbittorrent.middlewares: authelia@docker
      # Disable watchtower for this container because of these issues
      # https://github.com/containrrr/watchtower/issues/188
      # https://github.com/containrrr/watchtower/issues/1013
      com.centurylinklabs.watchtower.enable: "false"

  # Torrent client
  qbittorrent:
    <<: *common
    depends_on:
      wireguard:
        condition: service_healthy
    volumes:
      - ${docker_data_folder}/qbittorrent:/config
      - ${data_folder}:/data
      - ${docker_data_folder}/blackhole:/blackhole
      - /etc/localtime:/etc/localtime:ro
    tmpfs:
      - /tmp
    read_only: true
    cpu_count: 4
    mem_limit: 8G
    memswap_limit: 8G
    user: ${UID}:${GID}
    # NOTE: use `services:` instead of `containers:` because the
    #       container is defined in the same compose file
    network_mode: service:wireguard
    image: guillaumedsde/qbittorrent-distroless:latest
    labels:
      com.centurylinklabs.watchtower.depends-on: wireguard

  flood:
    <<: *common
    image: jesec/flood:master-distroless
    cpu_count: 2
    mem_limit: 400M
    memswap_limit: 400M
    read_only: true
    user: ${UID}:${GID}
    volumes:
      - ${docker_data_folder}/flood:/config
      - ${data_folder}:/data:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - traefik
    command:
      - --auth=none
      - --qburl=http://qbittorrent:8080
      - --qbuser=${QBT_USER}
      - --qbpass=${QBT_PASS}
      - --rundir=/config
    labels:
      <<: *traefik
      traefik.http.routers.flood.rule: Host(`flood.${root_domain}`)
      # service
      traefik.http.services.flood.loadbalancer.server.port: "3000"
      # Forward auth
      traefik.http.routers.flood.middlewares: authelia@docker

  # jackett tracker site scraper with API
  jackett:
    image: guillaumedsde/jackett-distroless:latest
    <<: *common
    depends_on:
      wireguard:
        condition: service_healthy
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/jackett:/config
      - ${docker_data_folder}/blackhole:/blackhole
    tmpfs:
      - "/var:rw,exec"
      - "/tmp:rw,exec"
    read_only: true
    cpu_count: 4
    mem_limit: 1G
    memswap_limit: 1G
    user: ${UID}:${GID}
    network_mode: service:wireguard
    environment:
      <<: *conf
    labels:
      com.centurylinklabs.watchtower.depends-on: wireguard

  prowlarr:
    image: docker.io/linuxserver/prowlarr:1.14.3
    <<: *common
    depends_on:
      wireguard:
        condition: service_healthy
    volumes:
      - ${docker_data_folder}/prowlarr:/config
      - ${docker_data_folder}/blackhole:/blackhole
    cpu_count: 4
    mem_limit: 3G
    memswap_limit: 3G
    network_mode: service:wireguard
    environment:
      <<: *conf
    labels:
      com.centurylinklabs.watchtower.depends-on: wireguard
    healthcheck:
      test:
        - CMD
        - wget
        - --quiet
        - --timeout=3
        - --tries=1
        - --spider
        - http://localhost:9696
      interval: 10s
      timeout: 5s
      retries: 8
      start_period: 15s

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:v3.3.16
    <<: *common
    # NOTE: default image UID is 1000
    user: 1000:1000
    cpu_count: 4
    mem_limit: 2G
    memswap_limit: 2G
    environment:
      <<: *conf
    networks:
      - flaresolverr

  # radarr, webapp for downloading movies through torrent client
  # queries are done with jackett
  radarr:
    image: docker.io/guillaumedsde/radarr-distroless:5.3.6.8612
    <<: *common
    cpu_count: 4
    mem_limit: 2G
    memswap_limit: 2G
    read_only: true
    user: ${UID}:${GID}
    depends_on:
      qbittorrent:
        condition: service_healthy
      prowlarr:
        condition: service_healthy
    volumes:
      - ${docker_data_folder}/radarr:/config
      - ${data_folder}:/data
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *traefik
      traefik.http.routers.radarr.rule: Host(`movies.${root_domain}`)
      # service
      traefik.http.services.radarr.loadbalancer.server.port: "7878"
      # Forward auth
      traefik.http.routers.radarr.middlewares: authelia@docker

  # sonarr, webapp for downloading series through torrent client
  # queries are done with jackett
  sonarr:
    image: docker.io/linuxserver/sonarr:3.0.10
    <<: *common
    cpu_count: 4
    mem_limit: 2G
    memswap_limit: 2G
    depends_on:
      qbittorrent:
        condition: service_healthy
      prowlarr:
        condition: service_healthy
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/sonarr:/config
      - ${data_folder}:/data
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *traefik
      traefik.http.routers.sonarr.rule: Host(`series.${root_domain}`)
      # service
      traefik.http.services.sonarr.loadbalancer.server.port: "8989"
      # Forward auth
      traefik.http.routers.sonarr.middlewares: authelia@docker

  # lidarr, webapp for downloading music through torrent client
  # queries are done with jackett
  lidarr:
    image: docker.io/linuxserver/lidarr:1.4.5
    <<: *common
    cpu_count: 4
    mem_limit: 2G
    memswap_limit: 2G
    depends_on:
      qbittorrent:
        condition: service_healthy
      prowlarr:
        condition: service_healthy
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/lidarr:/config
      - ${data_folder}:/data
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *traefik
      traefik.http.routers.lidarr.rule: Host(`music.${root_domain}`)
      # service
      traefik.http.services.lidarr.loadbalancer.server.port: "8686"
      # Forward auth
      traefik.http.routers.lidarr.middlewares: authelia@docker

  # readarr, webapp for downloading books through torrent client
  readarr:
    image: docker.io/linuxserver/readarr:0.3.21-develop
    <<: *common
    cpu_count: 4
    mem_limit: 2G
    memswap_limit: 2G
    depends_on:
      qbittorrent:
        condition: service_healthy
      prowlarr:
        condition: service_healthy
    volumes:
      - ${docker_data_folder}/readarr:/config
      - ${data_folder}:/data
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *traefik
      traefik.http.routers.readarr.rule: Host(`books.${root_domain}`)
      # service
      traefik.http.services.readarr.loadbalancer.server.port: "8787"
      # Forward auth
      traefik.http.routers.readarr.middlewares: authelia@docker

  # bazarr, webapp for downloading subtitles
  bazarr:
    image: docker.io/linuxserver/bazarr:1.4.2
    <<: *common
    depends_on:
      - "radarr"
      - "sonarr"
    environment:
      <<: *conf
    labels:
      <<: *traefik
      traefik.http.routers.bazarr.rule: Host(`subtitles.${root_domain}`)
      # service
      traefik.http.services.bazarr.loadbalancer.server.port: "6767"
      # Forward auth
      traefik.http.routers.bazarr.middlewares: authelia@docker
    cpu_count: 2
    mem_limit: 500M
    memswap_limit: 500M
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/bazarr:/config
      - ${data_folder}:/data
      - ./config/bazarr/sub-clean.sh:/usr/bin/sub-clean.sh
      - ./config/bazarr/chmod-custom-script.sh:/etc/cont-init.d/99-chmod-custom-script
    networks:
      - traefik

  # automatically extract torrented archives
  unpackerr:
    image: docker.io/golift/unpackerr:0.13
    user: ${UID}:${GID}
    read_only: true
    cpu_count: 4
    mem_limit: 500M
    memswap_limit: 500M
    <<: *common
    networks:
      - traefik
    volumes:
      - ${data_folder}:/data
    environment:
      UN_SONARR_0_URL: http://sonarr:8989
      UN_SONARR_0_API_KEY: ${SONARR_API_KEY}
      UN_SONARR_0_PATH: /data/download/series
      UN_RADARR_0_URL: http://radarr:7878
      UN_RADARR_0_API_KEY: ${RADARR_API_KEY}
      UN_RADARR_0_PATH: /data/download/series
      UN_LIDARR_0_URL: http://lidarr:8686
      UN_LIDARR_0_API_KEY: ${LIDARR_API_KEY}
      UN_LIDARR_0_PATH: /data/download/music

  recyclarr:
    image: docker.io/recyclarr/recyclarr:6.0
    user: 1000:1000
    cpu_count: 2
    mem_limit: 200M
    <<: *common
    environment:
      <<: *conf
      SONARR_API_KEY: ${SONARR_API_KEY}
      RADARR_API_KEY: ${RADARR_API_KEY}
    depends_on:
      radarr:
        condition: service_healthy
      sonarr:
        # FIXME: switch to service healthy once healthcheck is implemented for sonarr
        condition: service_started
    networks:
      - traefik
    volumes:
      - ${docker_data_folder}/recyclarr:/config
      - type: bind
        source: ./config/recyclarr/recyclarr.yml
        target: /config/recyclarr.yml

  # homer is a homepage container
  homer:
    image: docker.io/b4bz/homer:v23.10.1
    user: ${UID}:${GID}
    cpu_count: 2
    mem_limit: 100M
    memswap_limit: 100M
    read_only: true
    <<: *common
    networks:
      - homer
    volumes:
      - ${docker_data_folder}/homer/config.yml:/www/assets/config.yml:ro
      - ${docker_data_folder}/homer/assets:/www/assets:ro
    labels:
      <<: *traefik
      traefik.docker.network: homer
      traefik.http.routers.homer.rule: Host(`home.${root_domain}`, `${root_domain}`)
      # service
      traefik.http.services.homer.loadbalancer.server.port: "8080"
      # Forward auth
      traefik.http.routers.homer.middlewares: authelia@docker

  # jellyfin media server
  jellyfin:
    <<: *common
    image: docker.io/jellyfin/jellyfin:10.8.13
    user: ${UID}:${GID}
    cpu_count: 15
    mem_limit: 8G
    memswap_limit: 8G
    read_only: true
    depends_on:
      - openldap
    volumes:
      - type: bind
        source: ${docker_data_folder}/jellyfin
        target: /config
      - type: bind
        source: ${data_folder}/movies
        target: /data/movies
        read_only: true
      - type: bind
        source: ${data_folder}/series
        target: /data/series
        read_only: true
      - type: bind
        source: ${data_folder}/music
        target: /data/music
        read_only: true
      - type: bind
        source: ${data_folder}/pictures
        target: /data/pictures
        read_only: true
    networks:
      - traefik
      - ldap
    environment:
      <<: *conf
      # NOTE: required for read only root filesystem, see:
      #       https://github.com/dotnet/docs/issues/10217#issuecomment-462323277
      COMPlus_EnableDiagnostics: "0"
      JELLYFIN_PublishedServerUrl: jellyfin.${root_domain}
      #Uncomment forofficial Jellyfin image:
      JELLYFIN_DATA_DIR: /config/data
      JELLYFIN_CONFIG_DIR: /config
      JELLYFIN_LOG_DIR: /config/log
      JELLYFIN_CACHE_DIR: /config/cache
      JELLYFIN_FFmpeg__probesize: "20000000"
      JELLYFIN_FFmpeg__analyzeduration: "800000000"
    labels:
      <<: *traefik
      traefik.http.routers.jellyfin.rule: Host(`jellyfin.${root_domain}`)
      # service
      traefik.http.services.jellyfin.loadbalancer.server.port: "8096"

  # ombi, plex media requests
  ombi:
    image: docker.io/linuxserver/ombi:4.43.5
    <<: *common
    mem_limit: 2G
    memswap_limit: 2G
    cpu_count: 2
    depends_on:
      - "sonarr"
      - "radarr"
      - "lidarr"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/ombi:/config
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *traefik
      traefik.http.routers.ombi.rule: Host(`ombi.${root_domain}`)
      # service
      traefik.http.services.ombi.loadbalancer.server.port: "3579"
      # Forward auth
      traefik.http.routers.ombi.middlewares: authelia@docker

  # personal cloud
  nextcloud: &nextcloud
    depends_on:
      nextcloud-postgres:
        condition: service_healthy
      nextcloud-redis:
        condition: service_healthy
      ssh:
        condition: service_started
      openldap:
        condition: service_started
    volumes:
      - ${docker_data_folder}/nextcloud:/var/www/html
      - ${data_folder}:/data
    networks:
      - traefik
      - nextcloud
      - nextcloud-proxy
      - ldap
      - ssh
    environment:
      <<: *conf
      POSTGRES_DB: nextcloud
      POSTGRES_USER: nextcloud
      POSTGRES_PASSWORD: ${NEXTCLOUD_DB_PASSWORD}
      POSTGRES_HOST: nextcloud-postgres
      REDIS_HOST: nextcloud-redis
      REDIS_HOST_PASSWORD: ${NEXTCLOUD_REDIS_PASS}
      SMTP_HOST: smtp.sendgrid.net
      SMTP_SECURE: ssl
      SMTP_PORT: "465"
      SMTP_AUTHTYPE: login
      SMTP_NAME: apikey
      SMTP_PASSWORD: ${SENDGRID_PASS}
      MAIL_FROM_ADDRESS: nextcloud
      MAIL_DOMAIN: ${root_domain}
    labels:
      <<: *traefik
      traefik.docker.network: nextcloud-proxy
      traefik.http.routers.nextcloud.rule: Host(`cloud.${root_domain}`)
      traefik.http.routers.nextcloud.middlewares: nextcloud-redirectregex
      # service
      traefik.http.services.nextcloud.loadbalancer.server.port: "80"
      traefik.http.middlewares.nextcloud-redirectregex.redirectregex.permanent: "true"
      traefik.http.middlewares.nextcloud-redirectregex.redirectregex.regex: https://cloud.${root_domain}/.well-known/(card|cal)dav
      traefik.http.middlewares.nextcloud-redirectregex.redirectregex.replacement: https://cloud.${root_domain}/remote.php/dav/
    <<: *common
    mem_limit: 4G
    memswap_limit: 4G
    cpu_count: 8
    image: docker.io/nextcloud:28.0.3-apache

  nextcloud-cron:
    <<: *nextcloud
    labels: {}
    entrypoint:
      - /cron.sh

  # database for nextcloud
  nextcloud-postgres:
    <<: *common
    image: docker.io/postgres:15-bullseye
    cpu_count: 2
    mem_limit: 1G
    memswap_limit: 1G
    user: ${UID}:${GID}
    read_only: true
    environment:
      POSTGRES_PASSWORD: ${NEXTCLOUD_DB_PASSWORD}
      POSTGRES_USER: nextcloud
    tmpfs:
      - /run:mode=770,size=5M,uid=${UID},gid=${GID}
      - /tmp:mode=770,size=5M,uid=${UID},gid=${GID}
    volumes:
      - ${docker_data_folder}/nextcloud-postgres:/var/lib/postgresql/data
    networks:
      - nextcloud
    healthcheck:
      test:
        - "CMD"
        - "pg_isready"
        - "--username=nextcloud"
      start_period: 3s
      interval: 5s
      timeout: 3s
      retries: 5

  # cache for nextcloud
  nextcloud-redis:
    cpu_count: 2
    mem_limit: 250M
    memswap_limit: 250M
    read_only: true
    user: ${UID}:${GID}
    image: redis:7-bullseye
    networks:
      - nextcloud
    <<: *common
    volumes:
      - ${docker_data_folder}/nextcloud-redis:/data
    environment:
      REDISCLI_AUTH: "${NEXTCLOUD_REDIS_PASS}"
    command: redis-server --requirepass ${NEXTCLOUD_REDIS_PASS}
    healthcheck:
      test:
        - "CMD"
        - "redis-cli"
        - "ping"

  # Photo gallery
  photoprism:
    image: docker.io/photoprism/photoprism:230719
    <<: *common
    cpu_count: 2
    mem_limit: 2GB
    memswap_limit: 2GB
    user: ${UID}:${GID}
    depends_on:
      - photoprism-mariadb
    networks:
      - photoprism
      - photoprism-proxy
    environment:
      PHOTOPRISM_ADMIN_PASSWORD: "${PHOTOPRISM_ADMIN_PASSWORD}"
      PHOTOPRISM_SITE_URL: "https://photos.${root_domain}/"
      PHOTOPRISM_ORIGINALS_LIMIT: "5000"
      PHOTOPRISM_HTTP_COMPRESSION: "gzip"
      PHOTOPRISM_PUBLIC: "true"
      PHOTOPRISM_READONLY: "true"
      PHOTOPRISM_DISABLE_CHOWN: "true"
      PHOTOPRISM_DISABLE_WEBDAV: "true"
      PHOTOPRISM_DISABLE_SETTINGS: "false"
      PHOTOPRISM_DATABASE_DRIVER: "mysql"
      PHOTOPRISM_DATABASE_SERVER: "photoprism-mariadb:3306"
      PHOTOPRISM_DATABASE_NAME: "photoprism"
      PHOTOPRISM_DATABASE_USER: "photoprism"
      PHOTOPRISM_DATABASE_PASSWORD: "${PHOTOPRISM_DB_PASSWORD}"
      HOME: "/photoprism"
    volumes:
      - ${docker_data_folder}/photoprism:/photoprism/storage
      - ${data_folder}/pictures:/photoprism/originals:ro
    labels:
      <<: *traefik
      traefik.docker.network: photoprism-proxy
      traefik.http.routers.photoprism.rule: Host(`photos.${root_domain}`)
      # service
      traefik.http.services.photoprism.loadbalancer.server.port: "2342"
      # Forward auth
      traefik.http.routers.photoprism.middlewares: authelia@docker

  photoprism-mariadb:
    image: docker.io/mariadb:11.3
    <<: *common
    cpu_count: 2
    mem_limit: 1G
    memswap_limit: 1G
    user: ${UID}:${GID}
    environment:
      MARIADB_ROOT_PASSWORD: ${PHOTOPRISM_DB_ROOT_PASSWORD}
      MARIADB_DATABASE: photoprism
      MARIADB_USER: photoprism
      MARIADB_PASSWORD: "${PHOTOPRISM_DB_PASSWORD}"
      MARIADB_AUTO_UPGRADE: "true"
    networks:
      - photoprism
    volumes:
      - "${docker_data_folder}/photoprism-mariadb:/var/lib/mysql"
    command:
      - --innodb-buffer-pool-size=128M
      - --transaction-isolation=READ-COMMITTED
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --max-connections=512
      - --innodb-rollback-on-timeout=OFF
      - --innodb-lock-wait-timeout=120

  librespeed:
    image: ghcr.io/linuxserver/librespeed:5.3.0
    cpu_count: 2
    mem_limit: 500M
    memswap_limit: 500M
    <<: *common
    environment:
      <<: *conf
    volumes:
      - "${docker_data_folder}/librespeed:/config"
    networks:
      - librespeed
    labels:
      <<: *traefik
      traefik.docker.network: librespeed
      traefik.http.routers.librespeed.rule: Host(`librespeed.${root_domain}`)
      # service
      traefik.http.services.librespeed.loadbalancer.server.port: "80"
      # Forward auth
      traefik.http.routers.librespeed.middlewares: authelia@docker

  smokeping:
    image: ghcr.io/linuxserver/smokeping:2.8.2
    cpu_count: 2
    mem_limit: 250M
    memswap_limit: 250M
    <<: *common
    environment:
      <<: *conf
    volumes:
      - "${docker_data_folder}/smokeping/config:/config"
      - "${docker_data_folder}/smokeping/data:/data"
    networks:
      - smokeping
    labels:
      <<: *traefik
      traefik.docker.network: smokeping
      traefik.http.routers.smokeping.rule: Host(`smokeping.${root_domain}`)
      # service
      traefik.http.services.smokeping.loadbalancer.server.port: "80"
      # Forward auth
      traefik.http.routers.smokeping.middlewares: authelia@docker

  samba:
    environment:
      SAMBA_LDAP_PASSWORD: ${LDAP_ADMIN_PASSWORD}
      SID: ${SID}
    ports:
      - "139:139"
      - "445:445"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/samba/nslcd.conf:/etc/nslcd.conf:ro
      - ${docker_data_folder}/samba/smb.conf:/etc/samba/smb.conf:ro
      - ${docker_data_folder}/samba/secrets.tdb:/var/lib/samba/private/secrets.tdb
      - /data/users:/data/users
    depends_on:
      - openldap
    <<: *common
    mem_limit: 250M
    memswap_limit: 250M
    cpu_count: 2
    networks:
      - samba
      - ldap
    image: docker.io/guillaumedsde/samba-ldap:latest

  ssh:
    ports:
      - "1998:2222"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/samba/nslcd.conf:/etc/nslcd.conf:ro
      - ${docker_data_folder}/ssh/sshd_config:/etc/ssh/sshd_config:ro
      - ${docker_data_folder}/ssh/config:/config
      - /data/users:/data/users
    read_only: true
    tmpfs:
      - /run/sshd
      - /var:rw,exec
    environment:
      S6_READ_ONLY_ROOT: "1"
    depends_on:
      - openldap
    <<: *common
    mem_limit: 200MB
    memswap_limit: 200MB
    cpu_count: 2
    networks:
      - ssh
      - ldap
    image: docker.io/guillaumedsde/ssh-ldap

  # Web Service Discovery host daemon
  # see https://github.com/christgau/wsdd
  wsdd:
    network_mode: host
    user: ${UID}:${GID}
    read_only: true
    mem_limit: 150M
    memswap_limit: 150M
    cpu_count: 2
    <<: *common
    command: --ipv4only --verbose --hostname ${WSDD_HOSTNAME} --interface ${WSDD_INTERFACE}
    image: docker.io/guillaumedsde/wsdd-distroless:v0.7.1

  robots:
    image: docker.io/nginx:1.25-alpine
    read_only: true
    mem_limit: 200M
    memswap_limit: 200M
    cpu_count: 2
    volumes:
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./config/nginx/robots.txt:/usr/share/nginx/html/robots.txt:ro
      - robots-nginx-cache:/var/cache/nginx
      - robots-nginx-pid:/var/run
      - robots-nginx-conf:/etc/nginx/conf.d/
    networks:
      - robots
    labels:
      <<: *traefik
      traefik.docker.network: robots
      traefik.http.routers.robots.rule: HostRegexp(`${root_domain}`,`{subhost:[a-z]+}.${root_domain}`) && Path(`/robots.txt`)
      # service
      traefik.http.services.robots.loadbalancer.server.port: "8080"
    healthcheck:
      test:
        - "CMD"
        - "nc"
        - "-vz"
        - "localhost"
        - "8080"
      start_period: 3s
      interval: 1s
      timeout: 1s
      retries: 5

  ##################################################################
  # Monitoring

  # netdata, server monitoring
  netdata:
    cpu_count: 2
    mem_limit: 1G
    memswap_limit: 1G
    image: docker.io/netdata/netdata:v1.45
    <<: *common
    volumes:
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - ${docker_data_folder}/netdata/health_alarm_notify.conf:/etc/netdata/health_alarm_notify.conf
      - ${docker_data_folder}/netdata/cache:/var/cache/netdata
    networks:
      - netdata
      - docker-socket-proxy
    environment:
      <<: *conf
      DOCKER_HOST: docker-socket-proxy:2375
      PGID: ${docker_group_id}
      NETDATA_DISABLE_TELEMETRY: "1"
      DISABLE_TELEMETRY: "1"
      DO_NOT_TRACK: "1"
      NETDATA_DISABLE_CLOUD: "1"
    labels:
      <<: *traefik
      traefik.docker.network: netdata
      traefik.http.routers.netdata.rule: Host(`status.${root_domain}`)
      # service
      traefik.http.services.netdata.loadbalancer.server.port: "19999"
      # CSP HTTP header middleware
      traefik.http.middlewares.netdataCSP.headers.customresponseheaders.Content-Security-Policy:
        >-
        Content-Security-Policy:
        base-uri 'self';
        default-src 'self' 'unsafe-inline' 'unsafe-eval';
      # Forward auth
      traefik.http.routers.netdata.middlewares: authelia@docker,netdataCSP@docker
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined

  scrutiny:
    image: ghcr.io/analogj/scrutiny:v0.8.0-omnibus
    <<: *common
    mem_limit: 500M
    memswap_limit: 500M
    cpu_count: 2
    cap_add:
      - SYS_RAWIO
    # FIXME: make this dynamic
    devices:
      - /dev/sda
      - /dev/sdb
      - /dev/sdc
      - /dev/sdd
      - /dev/sde
      - /dev/sdf
      - /dev/sdg
      - /dev/sdh
      - /dev/sdi
      - /dev/sdj
      - /dev/sdk
      - /dev/sdl
    volumes:
      - /run/udev:/run/udev:ro
      - ${docker_data_folder}/scrutiny/scrutiny:/opt/scrutiny/config
      - ${docker_data_folder}/scrutiny/influxdb:/opt/scrutiny/influxdb
    networks:
      - scrutiny
    environment:
      <<: *conf
    labels:
      <<: *traefik
      traefik.docker.network: scrutiny
      traefik.http.routers.scrutiny.rule: Host(`scrutiny.${root_domain}`)
      # service
      traefik.http.services.scrutiny.loadbalancer.server.port: "8080"
      # Forward auth
      traefik.http.routers.scrutiny.middlewares: authelia@docker

  ##################################################################
  # Authentication

  # LDAP server
  openldap:
    image: docker.io/osixia/openldap:1.5.0
    hostname: ldap.${old_root_domain}
    mem_limit: 250M
    memswap_limit: 250M
    environment:
      HOSTNAME: ldap.${old_root_domain}
      LDAP_DOMAIN: ${old_root_domain}
      LDAP_ORGANISATION: ${LDAP_ORGANISATION}
      LDAP_ADMIN_PASSWORD: ${LDAP_ADMIN_PASSWORD}
      LDAP_TLS: "true"
      LDAP_TLS_CRT_FILENAME: ldap.${old_root_domain}.cer
      LDAP_TLS_KEY_FILENAME: ldap.${old_root_domain}.key
      LDAP_TLS_CA_CRT_FILENAME: ca.cer
      LDAP_OPENLDAP_UID: ${UID}
      LDAP_OPENLDAP_GID: ${GID}
    command: "--copy-service"
    <<: *common
    networks:
      - ldap
    ports:
      - 389:389
      - 636:636
    volumes:
      - ${docker_data_folder}/openldap/ldap:/var/lib/ldap
      - ${docker_data_folder}/openldap/slapd.d:/etc/ldap/slapd.d
      - ./ldap_templates:/container/service/slapd/assets/config/bootstrap/ldif/custom:ro
      # certificates
      - ${docker_data_folder}/openldap/certs/ldap.${old_root_domain}:/container/service/slapd/assets/certs:ro

  # LDAP Server management web GUI
  lam:
    image: docker.io/ldapaccountmanager/lam:stable
    volumes:
      - ${docker_data_folder}/lam/config.cfg:/etc/ldap-account-manager/config.cfg
      - ${docker_data_folder}/lam/lam.conf:/var/lib/ldap-account-manager/config/lam.conf
    environment:
      LAM_SKIP_PRECONFIGURE: "true"
    networks:
      - lam
      - ldap
    depends_on:
      - openldap
    <<: *common
    mem_limit: 200M
    memswap_limit: 200M
    labels:
      <<: *traefik
      traefik.docker.network: lam
      traefik.http.routers.lam.rule: Host(`lam.${root_domain}`)
      # service
      traefik.http.services.lam.loadbalancer.server.port: "80"
      # Forward auth
      traefik.http.routers.lam.middlewares: traefik-forward-auth

  # SSO
  authelia:
    image: docker.io/authelia/authelia:4.38
    cpu_count: 4
    user: ${UID}:${GID}
    mem_limit: 250M
    memswap_limit: 250M
    environment:
      # Global configuration
      AUTHELIA_JWT_SECRET: ${AUTHELIA_JWT_SECRET}
      AUTHELIA_DEFAULT_REDIRECTION_URL: https://${root_domain}
      # Notifier configuration
      AUTHELIA_NOTIFIER_SMTP_PASSWORD: ${SENDGRID_PASS}
      AUTHELIA_NOTIFIER_SMTP_SENDER: Authelia <authelia@${root_domain}>
      AUTHELIA_NOTIFIER_SMTP_STARTUP_CHECK_ADDRESS: ${letsencrypt_email}
      # LDAP backend configuration
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_BASE_DN: ${LDAP_BASE_DN}
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_USER: ${LDAP_ADMIN_USER}
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD: ${LDAP_ADMIN_PASSWORD}
      # Session configuration
      AUTHELIA_SESSION_DOMAIN: ${root_domain}
      # Storage configuration
      AUTHELIA_STORAGE_ENCRYPTION_KEY: ${AUTHELIA_DB_ENCRYPTION_KEY}
      AUTHELIA_STORAGE_POSTGRES_PASSWORD: ${AUTHELIA_DB_PASSWORD}
      AUTHELIA_SESSION_SECRET: ${AUTHELIA_SESSION_SECRET}
    command:
      - --config
      - /config/config.yml
    <<: *common
    depends_on:
      authelia-db:
        condition: service_healthy
      authelia-redis:
        condition: service_healthy
      openldap:
        condition: service_started
    volumes:
      - ./config/authelia:/config:ro
    networks:
      - authelia-proxy
      - ldap
      - authelia
    labels:
      <<: *traefik
      traefik.docker.network: authelia-proxy
      traefik.http.routers.authelia.rule: Host(`authelia.${root_domain}`)
      # service
      traefik.http.services.authelia.loadbalancer.server.port: "9091"
      traefik.http.middlewares.authelia.forwardauth.address: http://authelia:9091/api/verify?rd=https://authelia.${root_domain}/'
      traefik.http.middlewares.authelia.forwardauth.trustForwardHeader: "true"
      traefik.http.middlewares.authelia.forwardauth.authResponseHeaders: Remote-User, Remote-Groups, Remote-Name, Remote-Email

  # DB for authelia
  authelia-db:
    <<: *common
    image: docker.io/postgres:14-bullseye
    cpu_count: 2
    mem_limit: 250M
    memswap_limit: 250M
    user: ${UID}:${GID}
    read_only: true
    environment:
      POSTGRES_USER: authelia
      POSTGRES_PASSWORD: ${AUTHELIA_DB_PASSWORD}
    tmpfs:
      - /run:mode=770,size=5M,uid=${UID},gid=${GID}
      - /tmp:mode=770,size=5M,uid=${UID},gid=${GID}
    volumes:
      - ${docker_data_folder}/authelia-db:/var/lib/postgresql/data
    networks:
      - authelia
    healthcheck:
      test:
        - "CMD"
        - "pg_isready"
        - "--username=authelia"
      start_period: 3s
      interval: 5s
      timeout: 3s
      retries: 5

  authelia-redis:
    <<: *common
    cpu_count: 2
    mem_limit: 250M
    memswap_limit: 250M
    read_only: true
    user: ${UID}:${GID}
    image: docker.io/redis:7-bullseye
    command:
      - redis-server
      - --save
      - "60"
      - "1"
    healthcheck:
      test:
        - "CMD"
        - "redis-cli"
        - "ping"
    volumes:
      - ${docker_data_folder}/authelia-redis:/data
    networks:
      - authelia

  # OIDC forward authentication for traefik
  traefik-forward-auth:
    image: docker.io/thomseddon/traefik-forward-auth:2
    <<: *common
    cpu_count: 2
    mem_limit: 100M
    memswap_limit: 100M
    read_only: true
    user: ${UID}:${GID}
    environment:
      PROVIDERS_GOOGLE_CLIENT_ID: ${OAUTH2_PROXY_CLIENT_ID}
      PROVIDERS_GOOGLE_CLIENT_SECRET: ${OAUTH2_PROXY_CLIENT_SECRET}
      SECRET: ${OAUTH2_PROXY_COOKIE_SECRET}
      #OIDC_ISSUER: https://accounts.google.com
      WHITELIST: "${allowed_emails}"
      AUTH_HOST: "oauth.${root_domain}"
      COOKIE_DOMAIN: "${root_domain}"
      COOKIE_NAME: _google_forward_auth
      CSRF_COOKIE_NAME: _google_forward_auth_csrf
    networks:
      - traefik
    labels:
      <<: *traefik
      # HTTP entrypoint
      traefik.http.routers.traefik-forward-auth.rule: Host(`oauth.${root_domain}`)
      # service
      traefik.http.services.traefik-forward-auth.loadbalancer.server.port: "4181"
      # Forward auth
      traefik.http.middlewares.traefik-forward-auth.forwardauth.address: http://traefik-forward-auth:4181
      traefik.http.routers.traefik-forward-auth.middlewares: traefik-forward-auth
      traefik.http.middlewares.traefik-forward-auth.forwardauth.authResponseHeaders: X-Forwarded-User

networks:
  watchtower:
    driver: bridge
    name: watchtower
  traefik:
    driver: bridge
    name: traefik
  ldap:
    driver: bridge
    internal: true
    name: ldap
  authelia:
    driver: bridge
    internal: true
    name: authelia
  nextcloud:
    driver: bridge
    internal: true
    name: nextcloud
  samba:
    driver: bridge
    name: samba
  ssh:
    driver: bridge
    name: ssh
  homer:
    driver: bridge
    internal: true
    name: homer
  nextcloud-proxy:
    driver: bridge
    name: nextcloud-proxy
  robots:
    driver: bridge
    internal: true
    name: robots
  netdata:
    driver: bridge
    internal: true
    name: netdata
  scrutiny:
    driver: bridge
    name: scrutiny
  lam:
    driver: bridge
    internal: true
    name: lam
  authelia-proxy:
    driver: bridge
    name: authelia-proxy
  photoprism:
    driver: bridge
    internal: true
    name: photoprism
  photoprism-proxy:
    driver: bridge
    name: photoprism-proxy
  flaresolverr:
    driver: bridge
    name: flaresolverr
  docker-socket-proxy:
    driver: bridge
    internal: true
    name: docker-socket-proxy
  librespeed:
    driver: bridge
    name: librespeed
  smokeping:
    driver: bridge
    name: smokeping

volumes:
  robots-nginx-cache:
  robots-nginx-pid:
  robots-nginx-conf:
