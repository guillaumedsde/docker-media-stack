%YAML 1.1
---
# THE MEDIA STACK #
# this docker-compose file will get a selection of media downloading/management webapps
# I've tried to simplify getting started as much as possible
#   1. configure your desired variables in the .env file
#   2. run `docker compose up -d` from the folder with this docker-copose.yml folder
# NOTE this process is not fully automated and individual configuration of webapps is still required after docker compose

# basic common configuration for most containers
x-conf: &conf
  TZ: ${TZ}
  PGID: ${GID}
  PUID: ${UID}
  # NOTE: this umask env var is mostly used by lsio containers
  #       docker does not have an option to set umask, see:
  #       https://github.com/moby/moby/issues/19189
  UMASK: "077"

# container restart policy
x-common: &common
  restart: always
  logging:
    driver: "local"
    options:
      max-file: "5"
      max-size: "10m"

# Traefik
x-traefik: &traefik
  traefik.enable: "true"

services:
  # reverse proxy
  traefik:
    image: docker.io/traefik:v3.1.2@sha256:e325efe05922db1a4fe8b026a57c07ef65254efc5cd8ad5ffec767d8a1b34f0f
    user: ${UID}:${GID}
    depends_on:
      traefik-socket-proxy:
        condition: service_healthy
      authelia:
        condition: service_healthy
    cap_add:
      - NET_BIND_SERVICE
    command:
      - "--global.checknewversion=false"
      - "--global.sendanonymoususage=false"
      - "--log.level=${TRAEFIK_LOG_LEVEL:-INFO}"
      # docker configuration
      - "--providers.docker=true"
      - "--providers.docker.endpoint=tcp://traefik-socket-proxy:2375"
      - "--providers.docker.exposedbydefault=false"
      # entrypoints
      # HTTP
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      # HTTPS
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls.certResolver=le"
      - "--entrypoints.websecure.http.tls.domains[0].main=${root_domain}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.${root_domain}"
      - "--entryPoints.websecure.http.middlewares=securityHeaders@file"
      # DNS challenge
      - "--certificatesresolvers.le=true"
      - "--certificatesresolvers.le.acme.storage=/traefik/acme.json"
      - "--certificatesresolvers.le.acme.dnschallenge=true"
      - "--certificatesresolvers.le.acme.dnschallenge.delayBeforeCheck=30"
      - "--certificatesresolvers.le.acme.dnschallenge.provider=ovh"
      - "--certificatesresolvers.le.acme.email=${letsencrypt_email}"
      - "--certificatesresolvers.le.acme.keytype=EC384"
      - "--certificatesresolvers.le.acme.dnsChallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
      # configs
      - "--providers.file.directory=/config/"
      # traefik API and dashboard
      - "--api=true"
      - "--api.dashboard=true"
      # traefik healthcheck
      - "--ping=true"
      - "--ping.manualrouting=true"
      # traefik access logs
      # - "--accesslog=true"
    environment:
      OVH_ENDPOINT: ${OVH_ENDPOINT}
      OVH_APPLICATION_KEY: ${OVH_APPLICATION_KEY}
      OVH_APPLICATION_SECRET: ${OVH_APPLICATION_SECRET}
      OVH_CONSUMER_KEY: ${OVH_CONSUMER_KEY}
      LEGO_EXPERIMENTAL_CNAME_SUPPORT: "true"
    labels:
      <<: *traefik
      # Dashboard
      traefik.http.routers.dashboard.rule: Host(`traefik.${root_domain}`)
      traefik.http.routers.dashboard.service: api@internal
      traefik.http.routers.dashboard.middlewares: traefik-forward-auth
      # Healthcheck
      traefik.http.routers.ping.rule: Host(`ping.${root_domain}`)
      traefik.http.routers.ping.service: ping@internal
    read_only: true
    volumes:
      - ${docker_data_folder}/traefik/data:/traefik
      - ./config/traefik:/config:ro
      - ${docker_data_folder}/traefik/plugins-storage:/plugins-storage
    tmpfs:
      - /tmp:mode=770,size=5M,uid=${UID},gid=${GID}
    networks:
      - traefik-socket-proxy
      - traefik
      - homer
      - nextcloud-proxy
      - robots
      - netdata
      - scrutiny
      - lam
      - authelia-proxy
      - librespeed
      - tandoor
      - homeassistant
      - miniflux-proxy
      - lldap
      - sftpgo
    <<: *common
    mem_limit: 500M
    memswap_limit: 500M
    cpu_count: 4
    ports:
      - target: 80
        published: 80
        host_ip: "0.0.0.0"
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        host_ip: "0.0.0.0"
        protocol: tcp
        mode: host
      - target: 80
        published: 80
        host_ip: "::"
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        host_ip: "::"
        protocol: tcp
        mode: host
    healthcheck:
      test:
        - "CMD"
        - "nc"
        - "-vz"
        - "127.0.0.1"
        - "80"
      start_period: 3s
      interval: 3s
      timeout: 3s
      retries: 5

  traefik-socket-proxy: &socket-proxy
    <<: *common
    image: docker.io/wollomatic/socket-proxy:1.4.0@sha256:572192d9fa89865a458ecb071b7aa32b218669458b7493244a9ec084eb09cadd
    cpu_count: 2
    mem_limit: 50M
    memswap_limit: 50M
    user: ${UID}:${docker_group_id}
    read_only: true
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    entrypoint:
      - "/socket-proxy"
      - "-loglevel=info"
      - "-listenip=0.0.0.0"
      - "-shutdowngracetime=5"
      - "-watchdoginterval=600"
      - "-stoponwatchdog"
      - "-allowhealthcheck"
    command:
      - "-allowfrom=traefik"
      # NOTE: https://github.com/wollomatic/traefik-hardened/blob/b2bfcad2a1bf727f2fea33d3d68d3eca9bb1f8da/docker-compose.yaml#L12
      - '-allowGET=/v1\..{1,2}/(version|containers/.*|events.*)'
    networks:
      - traefik-socket-proxy
    healthcheck:
      test:
        - "CMD"
        - "./healthcheck"
      interval: 10s
      timeout: 5s
      retries: 2

  # watchtower container to update images
  # NOTE to update the containers images' watchtower needs to restart the containers this implies some downtime when it does
  # NOTE watchtower also updates itself
  watchtower:
    image: ghcr.io/containrrr/watchtower:1.7.1@sha256:f9086bfda061100361fc2bacf069585678d760d705cf390918ccdbda8a00980b
    <<: *common
    mem_limit: 50M
    memswap_limit: 50M
    cpu_count: 2
    read_only: true
    user: ${UID}:${GID}
    environment:
      DOCKER_HOST: "tcp://watchtower-socket-proxy:2375"
    depends_on:
      watchtower-socket-proxy:
        condition: service_healthy
    networks:
      - watchtower
      - watchtower-socket-proxy
    command:
      - "--cleanup"
      - "--schedule"
      - "0 0 5 * * *"

  watchtower-socket-proxy:
    <<: *socket-proxy
    command:
      - "-allowfrom=watchtower"
      # NOTE: https://github.com/wollomatic/socket-proxy/blob/6ba2fa6112fb9a115e99de0634b15f1fbe1fb513/examples/docker-compose/watchtower/compose.yaml#L9-L12
      - '-allowGET=/v1\..{2}/(containers/.*|images/.*)'
      - '-allowPOST=/v1\..{2}/(containers/.*|images/.*|networks/.*)'
      - '-allowDELETE=/v1\..{2}/(containers/.*|images/.*)'
    networks:
      - watchtower-socket-proxy

  # Wireguard VPN client
  wireguard:
    <<: *common
    image: docker.io/qmcgaw/gluetun:v3.39.0@sha256:2f011a9aca767af62008d879eefcbc80a8645bd4fd4466ab312cc941cb658ad1
    cap_add:
      - NET_ADMIN
    cpu_count: 4
    mem_limit: 250M
    memswap_limit: 250M
    sysctls:
      net.ipv6.conf.all.disable_ipv6: 0
    volumes:
      - type: bind
        source: ${docker_data_folder}/gluetun
        target: /gluetun
    networks:
      traefik:
        aliases:
          - qbittorrent
          - prowlarr
      flaresolverr:
    healthcheck:
      retries: 25
    environment:
      <<: *conf
      LOG_LEVEL: ${GLUETUN_LOG_LEVEL:-info}
      VPN_SERVICE_PROVIDER: ${VPN_SERVICE_PROVIDER}
      VPN_TYPE: wireguard
      SERVER_COUNTRIES: ${VPN_SERVER_COUNTRIES}
      WIREGUARD_PRIVATE_KEY: ${WIREGUARD_PRIVATE_KEY}
      WIREGUARD_PRESHARED_KEY: ${WIREGUARD_PRESHARED_KEY}
      WIREGUARD_ADDRESSES: ${WIREGUARD_ADDRESSES}
      FIREWALL_VPN_INPUT_PORTS: ${FIREWALL_VPN_INPUT_PORTS}
      # Allow LAN access to other containers
      FIREWALL_OUTBOUND_SUBNETS: ${FIREWALL_OUTBOUND_SUBNETS}
      DNS_KEEP_NAMESERVER: "on"
      VERSION_INFORMATION: "off"
      HEALTH_SUCCESS_WAIT_DURATION: "10m"
    labels:
      <<: *traefik
      traefik.docker.network: "${COMPOSE_PROJECT_NAME}_traefik"
      # Prowlarr
      # service
      traefik.http.services.prowlarr.loadbalancer.server.port: "9696"
      # Router
      traefik.http.routers.prowlarr.rule: Host(`prowlarr.${root_domain}`)
      traefik.http.routers.prowlarr.service: prowlarr
      # Forward auth
      traefik.http.routers.prowlarr.middlewares: authelia@docker
      # qBittorrent
      # service
      traefik.http.services.qbittorrent.loadbalancer.server.port: "8080"
      # router
      traefik.http.routers.qbittorrent.rule: Host(`torrent.${root_domain}`)
      traefik.http.routers.qbittorrent.service: qbittorrent
      # Forward auth
      traefik.http.routers.qbittorrent.middlewares: authelia@docker
      # Disable watchtower for this container because of these issues
      # https://github.com/containrrr/watchtower/issues/188
      # https://github.com/containrrr/watchtower/issues/1013
      com.centurylinklabs.watchtower.enable: "false"

  # Torrent client
  qbittorrent:
    <<: *common
    depends_on:
      wireguard:
        condition: service_healthy
    volumes:
      - ${docker_data_folder}/qbittorrent:/config
      - ${data_folder}:/data
      - ${docker_data_folder}/blackhole:/blackhole
      - /etc/localtime:/etc/localtime:ro
    tmpfs:
      - /tmp:mode=770,size=5M,uid=${UID},gid=${GID}
    read_only: true
    cpu_count: 4
    mem_limit: 6G
    memswap_limit: 6G
    user: ${UID}:${GID}
    # NOTE: use `services:` instead of `containers:` because the
    #       container is defined in the same compose file
    network_mode: service:wireguard
    image: ghcr.io/guillaumedsde/qbittorrent-distroless:sha-9046e8b@sha256:ae817a9614131264f2e0620bc4bd4a010205e22aa4c535683b27df681f8976e0
    labels:
      com.centurylinklabs.watchtower.depends-on: ${COMPOSE_PROJECT_NAME}-wireguard-1
    healthcheck:
      start_period: 30s
      retries: 10

  prowlarr:
    <<: *common
    image: ghcr.io/onedr0p/prowlarr:1.23.1.4708@sha256:68b27f658b850e41e6d67fe8f3bf630bef8dc468495c1d9abf5d96647f30cd2c
    cpu_count: 4
    mem_limit: 3G
    memswap_limit: 3G
    read_only: true
    user: ${UID}:${GID}
    network_mode: service:wireguard
    depends_on:
      wireguard:
        condition: service_healthy
    volumes:
      - ${docker_data_folder}/prowlarr:/config
      - ${docker_data_folder}/blackhole:/blackhole
    environment:
      <<: *conf
    labels:
      com.centurylinklabs.watchtower.depends-on: ${COMPOSE_PROJECT_NAME}-wireguard-1
    healthcheck:
      test:
        - CMD
        - wget
        - --quiet
        - --timeout=3
        - --tries=1
        - --spider
        - http://localhost:9696
      interval: 10s
      timeout: 5s
      retries: 8
      start_period: 15s

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:v3.3.21@sha256:1a30e1ad6bb3df626bfe3b9735a6d60e208c475c89bf18be0db4d4b121a3cb0e
    <<: *common
    # NOTE: default image UID is 1000
    user: 1000:1000
    cpu_count: 4
    mem_limit: 2G
    memswap_limit: 2G
    environment:
      <<: *conf
    networks:
      - flaresolverr

  # radarr, webapp for downloading movies through torrent client
  radarr:
    image: ghcr.io/onedr0p/radarr:5.9.1.9070@sha256:466719f350a5eba787f185378ec529dd7c05045f7de54d2f6a3d8bcd0e3d1ff1
    <<: *common
    cpu_count: 4
    mem_limit: 2G
    memswap_limit: 2G
    read_only: true
    user: ${UID}:${GID}
    depends_on:
      qbittorrent:
        condition: service_healthy
      prowlarr:
        condition: service_healthy
    volumes:
      - ${docker_data_folder}/radarr:/config
      - ${data_folder}:/data
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *traefik
      traefik.http.routers.radarr.rule: Host(`movies.${root_domain}`)
      # service
      traefik.http.services.radarr.loadbalancer.server.port: "7878"
      # Forward auth
      traefik.http.routers.radarr.middlewares: authelia@docker
    healthcheck:
      test:
        - CMD
        - wget
        - --quiet
        - --timeout=3
        - --tries=1
        - --spider
        - http://localhost:7878
      interval: 5s
      timeout: 4s
      retries: 4
      start_period: 5s

  # sonarr, webapp for downloading series through torrent client
  sonarr:
    <<: *common
    image: ghcr.io/onedr0p/sonarr:4.0.9.2244@sha256:a3e0123ea3a50380de801a1157110ac630b2100aff590519740c2cf23e9bf65a
    cpu_count: 4
    mem_limit: 2G
    memswap_limit: 2G
    read_only: true
    user: ${UID}:${GID}
    depends_on:
      qbittorrent:
        condition: service_healthy
      prowlarr:
        condition: service_healthy
    volumes:
      - ${docker_data_folder}/sonarr:/config
      - ${data_folder}:/data
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *traefik
      traefik.http.routers.sonarr.rule: Host(`series.${root_domain}`)
      # service
      traefik.http.services.sonarr.loadbalancer.server.port: "8989"
      # Forward auth
      traefik.http.routers.sonarr.middlewares: authelia@docker
    healthcheck:
      test:
        - CMD
        - wget
        - --quiet
        - --timeout=3
        - --tries=1
        - --spider
        - http://localhost:8989
      interval: 5s
      timeout: 4s
      retries: 4
      start_period: 5s

  # lidarr, webapp for downloading music through torrent client
  lidarr:
    <<: *common
    image: ghcr.io/onedr0p/lidarr:2.4.3.4248@sha256:401aec97ad0f0fc26f87f73ae793b981b849c71cd1e4278b60b2a5a8c4507914
    cpu_count: 4
    mem_limit: 2G
    memswap_limit: 2G
    read_only: true
    user: ${UID}:${GID}
    depends_on:
      qbittorrent:
        condition: service_healthy
      prowlarr:
        condition: service_healthy
    volumes:
      - ${docker_data_folder}/lidarr:/config
      - ${data_folder}:/data
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *traefik
      traefik.http.routers.lidarr.rule: Host(`music.${root_domain}`)
      # service
      traefik.http.services.lidarr.loadbalancer.server.port: "8686"
      # Forward auth
      traefik.http.routers.lidarr.middlewares: authelia@docker
    healthcheck:
      test:
        - CMD
        - wget
        - --quiet
        - --timeout=3
        - --tries=1
        - --spider
        - http://localhost:8686
      interval: 5s
      timeout: 4s
      retries: 4
      start_period: 5s

  # readarr, webapp for downloading books through torrent client
  readarr:
    <<: *common
    image: ghcr.io/onedr0p/readarr-develop:0.3.32.2587@sha256:3ae920c56261b120ec6e7fce038cd700cc691b74d6326ac074b0a8985af5f8b6
    cpu_count: 4
    mem_limit: 2G
    memswap_limit: 2G
    read_only: true
    user: ${UID}:${GID}
    depends_on:
      qbittorrent:
        condition: service_healthy
      prowlarr:
        condition: service_healthy
    volumes:
      - ${docker_data_folder}/readarr:/config
      - ${data_folder}:/data
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *traefik
      traefik.http.routers.readarr.rule: Host(`books.${root_domain}`)
      # service
      traefik.http.services.readarr.loadbalancer.server.port: "8787"
      # Forward auth
      traefik.http.routers.readarr.middlewares: authelia@docker
    healthcheck:
      test:
        - CMD
        - wget
        - --quiet
        - --timeout=3
        - --tries=1
        - --spider
        - http://localhost:8787
      interval: 5s
      timeout: 4s
      retries: 4
      start_period: 5s

  # bazarr, webapp for downloading subtitles
  bazarr:
    <<: *common
    depends_on:
      radarr:
        condition: service_healthy
      sonarr:
        condition: service_healthy
    image: ghcr.io/onedr0p/bazarr:1.4.3@sha256:9dd29c8746f37d4db3cf6d10f03daa162d3fab861cf877ade8d435b58a5e0e10
    cpu_count: 2
    mem_limit: 500M
    memswap_limit: 500M
    read_only: true
    user: ${UID}:${GID}
    environment:
      <<: *conf
    volumes:
      - ${docker_data_folder}/bazarr:/config
      - ${data_folder}:/data
    networks:
      - traefik
    labels:
      <<: *traefik
      traefik.http.routers.bazarr.rule: Host(`subtitles.${root_domain}`)
      # service
      traefik.http.services.bazarr.loadbalancer.server.port: "6767"
      # Forward auth
      traefik.http.routers.bazarr.middlewares: authelia@docker
    healthcheck:
      test:
        - CMD
        - wget
        - --quiet
        - --timeout=3
        - --tries=1
        - --spider
        - http://127.0.0.1:6767
      interval: 5s
      timeout: 4s
      retries: 4
      start_period: 5s

  # automatically extract torrented archives
  unpackerr:
    image: docker.io/golift/unpackerr:0.14.5@sha256:8493ffc2dd17e0b8a034552bb52d44e003fa457ee407da97ccc69328bce4a815
    user: ${UID}:${GID}
    read_only: true
    cpu_count: 4
    mem_limit: 500M
    memswap_limit: 500M
    <<: *common
    networks:
      - traefik
    volumes:
      - ${data_folder}:/data
    environment:
      UN_SONARR_0_URL: http://sonarr:8989
      UN_SONARR_0_API_KEY: ${SONARR_API_KEY}
      UN_SONARR_0_PATH: /data/download/series
      UN_RADARR_0_URL: http://radarr:7878
      UN_RADARR_0_API_KEY: ${RADARR_API_KEY}
      UN_RADARR_0_PATH: /data/download/series
      UN_LIDARR_0_URL: http://lidarr:8686
      UN_LIDARR_0_API_KEY: ${LIDARR_API_KEY}
      UN_LIDARR_0_PATH: /data/download/music

  homeassistant:
    <<: *common
    image: "ghcr.io/home-assistant/home-assistant:2024.9.1@sha256:e8a90abcaeebfeac309886787072733325b53dd5cfc6c7b67dfae86c25605c1d"
    user: "${UID}:${GID}"
    cpu_count: 2
    mem_limit: 1G
    memswap_limit: 1G
    read_only: true
    environment:
      <<: *conf
      S6_READ_ONLY_ROOT: "1"
    networks:
      - homeassistant
    tmpfs:
      - /run:exec,mode=770,size=5M,uid=${UID},gid=${GID}
    volumes:
      - type: bind
        source: ${docker_data_folder}/homeassistant
        target: /config
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
    labels:
      <<: *traefik
      traefik.http.routers.homeassistant.rule: Host(`homeassistant.${root_domain}`)
      # service
      traefik.http.services.homeassistant.loadbalancer.server.port: "8123"
      # Forward auth
      traefik.http.routers.homeassistant.middlewares: authelia@docker
    healthcheck:
      test:
        - CMD
        - wget
        - --quiet
        - --timeout=3
        - --tries=1
        - --spider
        - http://localhost:8123
      interval: 5s
      timeout: 4s
      retries: 4
      start_period: 10s

  homeassistant-linky:
    <<: *common
    depends_on:
      homeassistant:
        condition: service_healthy
    image: bokub/ha-linky-standalone:${HA_LINKY_VERSION:-1.5.0}
    build:
      context: https://github.com/bokub/ha-linky.git#${HA_LINKY_VERSION:-1.5.0}
      dockerfile: standalone.Dockerfile
    user: "${UID}:${GID}"
    cpu_count: 2
    mem_limit: 1G
    memswap_limit: 1G
    # NOTE: docker can't mount config in read only filesystem, see:
    #       https://github.com/docker/compose/issues/12031
    read_only: false
    configs:
      - source: homassistant_linky_config
        target: /data/options.json
        mode: 0444
    environment:
      <<: *conf
      SUPERVISOR_TOKEN: ${HOMEASSISTANT_TOKEN}
      WS_URL: ws://homeassistant:8123/api/websocket
    networks:
      - homeassistant

  # homer is a homepage container
  homer:
    image: docker.io/b4bz/homer:v24.05.1@sha256:66c2a66e3df660e270eca9a388c4164409c8f54edac7cf3c2424075fef593a39
    user: ${UID}:${GID}
    cpu_count: 2
    mem_limit: 100M
    memswap_limit: 100M
    read_only: true
    <<: *common
    networks:
      - homer
    volumes:
      - ${docker_data_folder}/homer/config.yml:/www/assets/config.yml:ro
      - ${docker_data_folder}/homer/assets:/www/assets:ro
    labels:
      <<: *traefik
      traefik.http.routers.homer.rule: Host(`home.${root_domain}`) || Host(`${root_domain}`)
      # service
      traefik.http.services.homer.loadbalancer.server.port: "8080"
      # Forward auth
      traefik.http.routers.homer.middlewares: authelia@docker

  # jellyfin media server
  jellyfin:
    <<: *common
    image: docker.io/jellyfin/jellyfin:10.9.11@sha256:fc1b51f4be3fba725e42dae2022d9c6a5b069acce01bef04d32fdee025dc511e
    user: ${UID}:${GID}
    cpu_count: 15
    mem_limit: 8G
    memswap_limit: 8G
    read_only: true
    depends_on:
      openldap:
        condition: service_healthy
    tmpfs:
      - /config/data/transcodes:mode=770,size=4G,uid=${UID},gid=${GID}
    volumes:
      - type: bind
        source: ${docker_data_folder}/jellyfin
        target: /config
      - type: bind
        source: ${data_folder}/movies
        target: /data/movies
        read_only: true
      - type: bind
        source: ${data_folder}/series
        target: /data/series
        read_only: true
      - type: bind
        source: ${data_folder}/music
        target: /data/music
        read_only: true
      - type: bind
        source: ${data_folder}/pictures
        target: /data/pictures
        read_only: true
      - type: bind
        source: "${data_folder}/Recettes de cuisine"
        target: /data/recipes
        read_only: true
    networks:
      - traefik
      - ldap
    environment:
      <<: *conf
      # NOTE: required for read only root filesystem, see:
      #       https://github.com/dotnet/docs/issues/10217#issuecomment-462323277
      COMPlus_EnableDiagnostics: "0"
      #Uncomment forofficial Jellyfin image:
      JELLYFIN_DATA_DIR: /config/data
      JELLYFIN_CONFIG_DIR: /config
      JELLYFIN_LOG_DIR: /config/log
      JELLYFIN_CACHE_DIR: /config/cache
      JELLYFIN_FFmpeg__probesize: "2G"
      JELLYFIN_FFmpeg__analyzeduration: "800M"
      JELLYFIN_PublishedServerUrl: https://jellyfin.${root_domain}
    labels:
      <<: *traefik
      traefik.docker.network: "${COMPOSE_PROJECT_NAME}_traefik"
      traefik.http.routers.jellyfin.rule: Host(`jellyfin.${root_domain}`)
      # service
      traefik.http.services.jellyfin.loadbalancer.server.port: "8096"

  jellyseer:
    <<: *common
    image: docker.io/fallenbagel/jellyseerr:1.9.2@sha256:8f708df0ce3f202056bde5d7bff625eb59efe38f4ee47bdddc7560b6e4a5a214
    user: ${UID}:${GID}
    cpu_count: 2
    mem_limit: 500M
    memswap_limit: 500M
    read_only: true
    depends_on:
      jellyfin:
        condition: service_healthy
      radarr:
        condition: service_healthy
      sonarr:
        condition: service_healthy
    volumes:
      - ${docker_data_folder}/jellyseer:/app/config
    tmpfs:
      - /tmp:mode=770,size=50M,uid=${UID},gid=${GID}
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *traefik
      traefik.http.middlewares.ombi-jellyseer-redirect.redirectregex.regex: "^https?://ombi.${root_domain}/(.*)"
      traefik.http.middlewares.ombi-jellyseer-redirect.redirectregex.replacement: "https://jellyseer.${root_domain}/"
      traefik.http.middlewares.ombi-jellyseer-redirect.redirectregex.permanent: "false"
      traefik.http.routers.jellyseer.rule: Host(`jellyseer.${root_domain}`) || Host(`ombi.${root_domain}`)
      # service
      traefik.http.services.jellyseer.loadbalancer.server.port: "5055"
      # Forward auth
      traefik.http.routers.jellyseer.middlewares: ombi-jellyseer-redirect
    healthcheck:
      test:
        - CMD
        - wget
        - --quiet
        - --timeout=3
        - --tries=1
        - --spider
        - http://localhost:5055
      interval: 5s
      timeout: 4s
      retries: 4
      start_period: 5s

  # personal cloud
  nextcloud: &nextcloud
    depends_on:
      nextcloud-postgres:
        condition: service_healthy
      nextcloud-redis:
        condition: service_healthy
      ssh:
        condition: service_started
      openldap:
        condition: service_healthy
    volumes:
      - ${docker_data_folder}/nextcloud:/var/www/html
      - ${data_folder}:/data
    networks:
      - traefik
      - nextcloud
      - nextcloud-proxy
      - ldap
      - ssh
    environment:
      <<: *conf
      POSTGRES_DB: nextcloud
      POSTGRES_USER: nextcloud
      POSTGRES_PASSWORD: ${NEXTCLOUD_DB_PASSWORD}
      POSTGRES_HOST: nextcloud-postgres
      REDIS_HOST: nextcloud-redis
      REDIS_HOST_PASSWORD: ${NEXTCLOUD_REDIS_PASS}
      SMTP_HOST: smtp.sendgrid.net
      SMTP_SECURE: ssl
      SMTP_PORT: "465"
      SMTP_AUTHTYPE: login
      SMTP_NAME: apikey
      SMTP_PASSWORD: ${SENDGRID_PASS}
      MAIL_FROM_ADDRESS: nextcloud
      MAIL_DOMAIN: ${root_domain}
    labels:
      <<: *traefik
      traefik.docker.network: "${COMPOSE_PROJECT_NAME}_nextcloud-proxy"
      traefik.http.routers.nextcloud.rule: Host(`cloud.${root_domain}`)
      traefik.http.routers.nextcloud.middlewares: nextcloud-redirectregex
      # service
      traefik.http.services.nextcloud.loadbalancer.server.port: "80"
      traefik.http.middlewares.nextcloud-redirectregex.redirectregex.permanent: "true"
      traefik.http.middlewares.nextcloud-redirectregex.redirectregex.regex: https://cloud.${root_domain}/.well-known/(card|cal)dav
      traefik.http.middlewares.nextcloud-redirectregex.redirectregex.replacement: https://cloud.${root_domain}/remote.php/dav/
    <<: *common
    mem_limit: 4G
    memswap_limit: 4G
    cpu_count: 8
    image: docker.io/nextcloud:29.0-apache
    healthcheck:
      test: curl -sSf 'http://localhost/status.php' | grep '"installed":true' | grep '"maintenance":false' | grep '"needsDbUpgrade":false' || exit 1
      interval: 10s
      timeout: 5s
      retries: 10

  nextcloud-cron:
    <<: *nextcloud
    labels: {}
    entrypoint:
      - /cron.sh
    healthcheck: {}

  # database for nextcloud
  nextcloud-postgres:
    <<: *common
    image: docker.io/postgres:15-bookworm
    cpu_count: 2
    mem_limit: 2G
    memswap_limit: 2G
    user: ${UID}:${GID}
    read_only: true
    environment:
      POSTGRES_PASSWORD: ${NEXTCLOUD_DB_PASSWORD}
      POSTGRES_USER: nextcloud
    tmpfs:
      - /run:mode=770,size=5M,uid=${UID},gid=${GID}
      - /tmp:mode=770,size=5M,uid=${UID},gid=${GID}
    volumes:
      - ${docker_data_folder}/nextcloud-postgres:/var/lib/postgresql/data
    networks:
      - nextcloud
    healthcheck: &postgres-healthcheck
      test:
        - "CMD-SHELL"
        - >-
          pg_isready
          --username="$${POSTGRES_USER}"
          --dbname="$${POSTGRES_USER}"
          --host=localhost
          --port=5432
      start_period: 5s
      interval: 5s
      timeout: 4s
      retries: 5

  # cache for nextcloud
  nextcloud-redis:
    cpu_count: 2
    mem_limit: 250M
    memswap_limit: 250M
    read_only: true
    user: ${UID}:${GID}
    image: redis:7-bookworm
    networks:
      - nextcloud
    <<: *common
    volumes:
      - ${docker_data_folder}/nextcloud-redis:/data
    environment:
      REDISCLI_AUTH: "${NEXTCLOUD_REDIS_PASS}"
    command: redis-server --requirepass ${NEXTCLOUD_REDIS_PASS}
    healthcheck: &redis-healthcheck
      test:
        - "CMD"
        - "redis-cli"
        - "ping"

  miniflux:
    <<: *common
    depends_on:
      miniflux-db:
        condition: service_healthy
    image: ghcr.io/miniflux/miniflux:2.2.0-distroless@sha256:f70295de3117218ea5176eb04764388a0dcd952afb22fd5ffcd303868eef3e0f
    cpu_count: 2
    mem_limit: 500M
    memswap_limit: 500M
    read_only: true
    user: ${UID}:${GID}
    networks:
      - miniflux
      - miniflux-proxy
    environment:
      BASE_URL: "https://miniflux.${root_domain}/"
      AUTH_PROXY_HEADER: "Remote-User"
      AUTH_PROXY_USER_CREATION: "true"
      RUN_MIGRATIONS: "1"
      DATABASE_URL: "postgres://miniflux:${MINIFLUX_DB_PASSWORD}@miniflux-db:5432/miniflux?sslmode=disable"
    labels:
      <<: *traefik
      traefik.docker.network: "${COMPOSE_PROJECT_NAME}_miniflux-proxy"
      traefik.http.routers.miniflux.rule: Host(`miniflux.${root_domain}`)
      # service
      traefik.http.services.miniflux.loadbalancer.server.port: "8080"
      # Forward auth
      traefik.http.routers.miniflux.middlewares: authelia@docker

  miniflux-db:
    <<: *common
    image: docker.io/postgres:16-bookworm
    cpu_count: 2
    mem_limit: 2G
    memswap_limit: 2G
    user: ${UID}:${GID}
    read_only: true
    environment:
      POSTGRES_PASSWORD: ${MINIFLUX_DB_PASSWORD}
      POSTGRES_USER: miniflux
    tmpfs:
      - /run:mode=770,size=5M,uid=${UID},gid=${GID}
      - /tmp:mode=770,size=5M,uid=${UID},gid=${GID}
    volumes:
      - ${docker_data_folder}/miniflux-db:/var/lib/postgresql/data
    networks:
      - miniflux
    healthcheck: *postgres-healthcheck

  librespeed:
    image: ghcr.io/linuxserver/librespeed:5.4.20240804@sha256:256e01b01048ff97ee06a742ad2619e121e4137a553b89df50f6e376b0e93aff
    cpu_count: 2
    mem_limit: 500M
    memswap_limit: 500M
    <<: *common
    environment:
      <<: *conf
    volumes:
      - "${docker_data_folder}/librespeed:/config"
    networks:
      - librespeed
    labels:
      <<: *traefik
      traefik.http.routers.librespeed.rule: Host(`librespeed.${root_domain}`)
      # service
      traefik.http.services.librespeed.loadbalancer.server.port: "80"
      # Forward auth
      traefik.http.routers.librespeed.middlewares: authelia@docker

  tandoor-db:
    <<: *common
    image: docker.io/postgres:16-bookworm
    cpu_count: 2
    mem_limit: 500M
    memswap_limit: 500M
    user: ${UID}:${GID}
    read_only: true
    environment:
      POSTGRES_USER: tandoor
      POSTGRES_PASSWORD: ${TANDOOR_DB_PASSWORD}
    tmpfs:
      - /run:mode=770,size=5M,uid=${UID},gid=${GID}
      - /tmp:mode=770,size=5M,uid=${UID},gid=${GID}
    volumes:
      - ${docker_data_folder}/tandoor-db:/var/lib/postgresql/data
    networks:
      - tandoor
    healthcheck: *postgres-healthcheck

  tandoor:
    <<: *common
    image: docker.io/vabene1111/recipes:1.5.19@sha256:77a556a15efdfde1657b64ab84d85870db480ab50b55f3b9aac3f9f3707fd1b9
    cpu_count: 2
    mem_limit: 500M
    memswap_limit: 500M
    user: ${UID}:${GID}
    read_only: true
    depends_on:
      tandoor-db:
        condition: service_healthy
    environment:
      SECRET_KEY: ${TANDOOR_SECRET_KEY}
      DB_ENGINE: django.db.backends.postgresql
      POSTGRES_HOST: tandoor-db
      POSTGRES_PORT: "5432"
      POSTGRES_USER: tandoor
      POSTGRES_PASSWORD: ${TANDOOR_DB_PASSWORD}
      POSTGRES_DB: tandoor
      REMOTE_USER_AUTH: "1"
    volumes:
      - type: bind
        source: "${docker_data_folder}/tandoor/staticfiles"
        target: "/opt/recipes/staticfiles"
      - type: bind
        source: "${docker_data_folder}/tandoor/mediafiles"
        target: "/opt/recipes/mediafiles"
    tmpfs:
      - /tmp:mode=770,size=10M,uid=${UID},gid=${GID}
    networks:
      - tandoor
    labels:
      <<: *traefik
      traefik.http.routers.tandoor.rule: Host(`tandoor.${root_domain}`)
      # service
      traefik.http.services.tandoor.loadbalancer.server.port: "8080"
      # Forward auth
      traefik.http.routers.tandoor.middlewares: authelia@docker
    healthcheck:
      test:
        - CMD
        - wget
        - --quiet
        - --timeout=3
        - --tries=1
        - --spider
        - http://localhost:8080
      interval: 5s
      timeout: 4s
      retries: 4
      start_period: 5s

  samba:
    environment:
      SAMBA_LDAP_PASSWORD: ${LDAP_ADMIN_PASSWORD}
      SID: ${SID}
    ports:
      - "139:139"
      - "445:445"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/samba/nslcd.conf:/etc/nslcd.conf:ro
      - ${docker_data_folder}/samba/smb.conf:/etc/samba/smb.conf:ro
      - ${docker_data_folder}/samba/secrets.tdb:/var/lib/samba/private/secrets.tdb
      - /data/users:/data/users
    depends_on:
      openldap:
        condition: service_healthy
    <<: *common
    mem_limit: 250M
    memswap_limit: 250M
    cpu_count: 2
    networks:
      - samba
      - ldap
    image: docker.io/guillaumedsde/samba-ldap:latest

  sftpgo:
    <<: *common
    image: docker.io/drakkan/sftpgo:v2.6.2-plugins@sha256:f1426b79fb243a43fd3dcc739cf2c9560f9f56bbe280a75a44968ce41aceb1ea
    cpu_count: 2
    mem_limit: 500M
    memswap_limit: 500M
    user: root
    read_only: true
    depends_on:
      lldap:
        # TODO healthcheck
        condition: service_started
    ports:
      - target: 2022
        published: 2022
        protocol: tcp
    tmpfs:
      - /tmp:mode=770,size=5M,uid=${UID},gid=${GID}
    volumes:
      - type: bind
        source: /data/users
        target: /srv/sftpgo/data
        read_only: true
      - type: bind
        source: ${docker_data_folder}/sftpgo
        target: /var/lib/sftpgo
    networks:
      - lldap
      - sftpgo
    environment:
      SFTPGO_DATA_PROVIDER__USERS_BASE_DIR: "/srv/sftpgo/data"
      SFTPGO_PLUGIN_AUTH_LDAP_URL: "ldap://lldap:3890"
      SFTPGO_PLUGIN_AUTH_LDAP_BASE_DN: "${LLDAP_LDAP_BASE_DN}"
      SFTPGO_PLUGIN_AUTH_LDAP_BIND_DN: "uid=sftpgo,ou=people,${LLDAP_LDAP_BASE_DN}"
      SFTPGO_PLUGIN_AUTH_LDAP_PASSWORD: "${SFTPGO_LDAP_PASSWORD}"
      SFTPGO_PLUGIN_AUTH_LDAP_SEARCH_QUERY: "(&(objectclass=person)(memberOf=cn=real_people,ou=groups,${LLDAP_LDAP_BASE_DN})(uid=%username%))"
      SFTPGO_PLUGIN_AUTH_PRIMARY_GROUP_PREFIX: "real_people"
      SFTPGO_PLUGIN_AUTH_CACHE_TIME: "60"
      SFTPGO_PLUGINS__0__TYPE: "auth"
      SFTPGO_PLUGINS__0__AUTH_OPTIONS__SCOPE: "5"
      SFTPGO_PLUGINS__0__CMD: "/usr/local/bin/sftpgo-plugin-auth"
      SFTPGO_PLUGINS__0__ARGS: "serve"
      SFTPGO_PLUGINS__0__AUTO_MTLS: "1"
    labels:
      <<: *traefik
      traefik.docker.network: "${COMPOSE_PROJECT_NAME}_sftpgo"
      traefik.http.routers.sftp.rule: Host(`sftp.${root_domain}`)
      # service
      traefik.http.services.sftp.loadbalancer.server.port: "8080"
      # Forward auth
      traefik.http.routers.sftp.middlewares: authelia@docker

  ssh:
    ports:
      - "1998:2222"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/samba/nslcd.conf:/etc/nslcd.conf:ro
      - ${docker_data_folder}/ssh/sshd_config:/etc/ssh/sshd_config:ro
      - ${docker_data_folder}/ssh/authorized_keys:/etc/ssh/authorized_keys
      - ${docker_data_folder}/ssh/config:/config
      - /data/users:/data/users
    read_only: true
    tmpfs:
      - /run/sshd
      - /var:rw,exec
    environment:
      S6_READ_ONLY_ROOT: "1"
    depends_on:
      openldap:
        condition: service_healthy
    <<: *common
    mem_limit: 200MB
    memswap_limit: 200MB
    cpu_count: 2
    networks:
      - ssh
      - ldap
    image: docker.io/guillaumedsde/ssh-ldap

  # Web Service Discovery host daemon
  # see https://github.com/christgau/wsdd
  wsdd:
    network_mode: host
    user: ${UID}:${GID}
    read_only: true
    mem_limit: 150M
    memswap_limit: 150M
    cpu_count: 2
    <<: *common
    command: --ipv4only --verbose --hostname ${WSDD_HOSTNAME} --interface ${WSDD_INTERFACE}
    image: docker.io/guillaumedsde/wsdd-distroless:v0.7.1@sha256:9ad3119d192e68a66f4df11099bad078be49443d12a389123225fb30025c474d

  robots:
    <<: *common
    image: docker.io/nginx:1.27-alpine
    read_only: true
    mem_limit: 200M
    memswap_limit: 200M
    cpu_count: 2
    tmpfs:
      # NOTE: hardcoding NGINX UID/GID for now until rootless image
      - /var/cache/nginx:mode=770,size=5M,uid=101,gid=101
      - /var/run:mode=770,size=5M,uid=101,gid=101
    volumes:
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./config/nginx/robots.txt:/usr/share/nginx/html/robots.txt:ro
    networks:
      - robots
    labels:
      <<: *traefik
      traefik.http.routers.robots.rule: ( Host(`${root_domain}`) || HostRegexp(`{subhost:[a-z]+}.${root_domain}`) ) && Path(`/robots.txt`)
      # service
      traefik.http.services.robots.loadbalancer.server.port: "8080"
    healthcheck:
      test:
        - "CMD"
        - "nc"
        - "-vz"
        - "127.0.0.1"
        - "8080"
      start_period: 3s
      interval: 1s
      timeout: 1s
      retries: 5

  ##################################################################
  # Monitoring

  # netdata, server monitoring
  netdata:
    <<: *common
    cpu_count: 2
    mem_limit: 1G
    memswap_limit: 1G
    pid: host
    image: docker.io/netdata/netdata:v1.47@sha256:84ae61184a74d2c777c44d010b777d7bfa2a251c9cea4bf84880fb232ef93b57
    volumes:
      - /:/host/root:ro,rslave
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /etc/localtime:/etc/localtime:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/log:/host/var/log:ro
      - /run/dbus:/run/dbus:ro
      - ${docker_data_folder}/netdata/health_alarm_notify.conf:/etc/netdata/health_alarm_notify.conf
      - ${docker_data_folder}/netdata/cache:/var/cache/netdata
      - ${docker_data_folder}/netdata/netdatalib:/var/lib/netdata
    depends_on:
      netdata-socket-proxy:
        condition: service_healthy
    networks:
      - netdata
      - netdata-socket-proxy
    environment:
      <<: *conf
      DOCKER_HOST: netdata-socket-proxy:2375
      NETDATA_DISABLE_TELEMETRY: "1"
      DISABLE_TELEMETRY: "1"
      DO_NOT_TRACK: "1"
      NETDATA_DISABLE_CLOUD: "1"
    labels:
      <<: *traefik
      traefik.docker.network: "${COMPOSE_PROJECT_NAME}_netdata"
      traefik.http.routers.netdata.rule: Host(`status.${root_domain}`)
      # service
      traefik.http.services.netdata.loadbalancer.server.port: "19999"
      # CSP HTTP header middleware
      traefik.http.middlewares.netdataCSP.headers.customresponseheaders.Content-Security-Policy:
        >-
        Content-Security-Policy:
        base-uri 'self';
        default-src 'self' 'unsafe-inline' 'unsafe-eval';
      # Forward auth
      traefik.http.routers.netdata.middlewares: authelia@docker,netdataCSP@docker
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined

  netdata-socket-proxy:
    <<: *socket-proxy
    command:
      - "-allowfrom=netdata"
      - '-allowGET=/v1\..{2}/(containers/.*|images/.*|info)'
      # NOTE: for some reason netdata accesses non-versionned docker endpoints
      - "-allowGET=/containers/.*"
    networks:
      - netdata-socket-proxy

  scrutiny:
    image: ghcr.io/analogj/scrutiny:v0.8.1-omnibus@sha256:214261df881879941b4b3e2235c601b086b358d0a29b513a82c4bf1e2de68e3e
    <<: *common
    mem_limit: 500M
    memswap_limit: 500M
    cpu_count: 2
    cap_add:
      - SYS_RAWIO
    # FIXME: make this dynamic, see: https://stackoverflow.com/a/55089229
    devices:
      - /dev/sda
      - /dev/sdb
      - /dev/sdc
      - /dev/sdd
      - /dev/sde
      - /dev/sdf
      - /dev/sdg
      - /dev/sdh
      - /dev/sdi
      - /dev/sdj
      - /dev/sdk
      - /dev/sdl
    volumes:
      - /run/udev:/run/udev:ro
      - ${docker_data_folder}/scrutiny/scrutiny:/opt/scrutiny/config
      - ${docker_data_folder}/scrutiny/influxdb:/opt/scrutiny/influxdb
    networks:
      - scrutiny
    environment:
      <<: *conf
    labels:
      <<: *traefik
      traefik.http.routers.scrutiny.rule: Host(`scrutiny.${root_domain}`)
      # service
      traefik.http.services.scrutiny.loadbalancer.server.port: "8080"
      # Forward auth
      traefik.http.routers.scrutiny.middlewares: authelia@docker
    healthcheck:
      test:
        - CMD
        - curl
        - -sSf
        - http://localhost:8080
      interval: 5s
      timeout: 4s
      retries: 4
      start_period: 5s

  ##################################################################
  # Authentication

  lldap:
    <<: *common
    depends_on:
      lldap-db:
        condition: service_healthy
    image: "docker.io/lldap/lldap:2024-08-08-alpine-rootless@sha256:5f472f57407cbe8d022cf5d01ffab339a63e171283cee1ab35441e698232d6fd"
    cpu_count: 2
    mem_limit: "250M"
    memswap_limit: "250M"
    user: "${UID}:${GID}"
    read_only: true
    volumes:
      - type: "bind"
        source: "${docker_data_folder}/lldap"
        target: /data
    networks:
      - "lldap"
      - "lldap-db"
    environment:
      <<: *conf
      LLDAP_LDAP_HOST: "::"
      LLDAP_LDAP_PORT: "3890"
      LLDAP_JWT_SECRET: "${LLDAP_JWT_SECRET}"
      LLDAP_KEY_SEED: "${LLDAP_KEY_SEED}"
      LLDAP_LDAP_BASE_DN: "${LLDAP_LDAP_BASE_DN}"
      LLDAP_LDAP_USER_PASS: "${LLDAP_LDAP_USER_PASS}"
      LLDAP_DATABASE_URL: "postgres://lldap:${LLDAP_DB_PASSWORD}@lldap-db/lldap"
      LLDAP_HTTP_URL: "https://lldap.${root_domain}"
      LLDAP_HTTP_PORT: "17170"
    labels:
      <<: *traefik
      traefik.docker.network: "${COMPOSE_PROJECT_NAME}_lldap"
      traefik.http.routers.lldap.rule: "Host(`lldap.${root_domain}`)"
      # service
      traefik.http.services.lldap.loadbalancer.server.port: "17170"

  lldap-db:
    <<: *common
    image: docker.io/postgres:16-bookworm
    cpu_count: 2
    mem_limit: 250M
    memswap_limit: 250M
    user: ${UID}:${GID}
    read_only: true
    environment:
      POSTGRES_USER: lldap
      POSTGRES_PASSWORD: ${LLDAP_DB_PASSWORD}
    tmpfs:
      - /run:mode=770,size=5M,uid=${UID},gid=${GID}
      - /tmp:mode=770,size=5M,uid=${UID},gid=${GID}
    volumes:
      - ${docker_data_folder}/lldap-db:/var/lib/postgresql/data
    networks:
      - lldap-db
    healthcheck: *postgres-healthcheck

  # LDAP server
  openldap:
    image: docker.io/osixia/openldap:1.5.0@sha256:0de3850635911109f0daf8f5957808ec4f4eb827fbaaa339100b5f1bab925745
    hostname: ldap.${old_root_domain}
    mem_limit: 250M
    memswap_limit: 250M
    environment:
      HOSTNAME: ldap.${old_root_domain}
      LDAP_DOMAIN: ${old_root_domain}
      LDAP_ORGANISATION: ${LDAP_ORGANISATION}
      LDAP_ADMIN_PASSWORD: ${LDAP_ADMIN_PASSWORD}
      LDAP_BASE_DN: ${LDAP_BASE_DN}
      LDAP_TLS: "true"
      LDAP_TLS_CRT_FILENAME: ldap.${old_root_domain}.cer
      LDAP_TLS_KEY_FILENAME: ldap.${old_root_domain}.key
      LDAP_TLS_CA_CRT_FILENAME: ca.cer
      LDAP_OPENLDAP_UID: ${UID}
      LDAP_OPENLDAP_GID: ${GID}
    command: "--copy-service"
    <<: *common
    networks:
      - ldap
    ports:
      - 389:389
      - 636:636
    volumes:
      - ${docker_data_folder}/openldap/ldap:/var/lib/ldap
      - ${docker_data_folder}/openldap/slapd.d:/etc/ldap/slapd.d
      - ./ldap_templates:/container/service/slapd/assets/config/bootstrap/ldif/custom:ro
      # certificates
      - ${docker_data_folder}/openldap/certs/ldap.${old_root_domain}:/container/service/slapd/assets/certs:ro
    healthcheck:
      test:
        - "CMD-SHELL"
        - >-
          ldapsearch
          -x
          -H ldap://localhost
          -b "${LDAP_BASE_DN}"
          -D "cn=admin,${LDAP_BASE_DN}"
          -w "${LDAP_ADMIN_PASSWORD}"
          -o nettimeout=10
      interval: 15s
      timeout: 10s
      start_period: 5m
      retries: 20

  # LDAP Server management web GUI
  lam:
    <<: *common
    depends_on:
      openldap:
        condition: service_healthy
    image: ghcr.io/ldapaccountmanager/lam:8.8@sha256:114213e36b7e80f99b43d25cb467832b738a8e2bfde9cebcfd45daf557d2a8ec
    volumes:
      - ${docker_data_folder}/lam/config.cfg:/etc/ldap-account-manager/config.cfg
      - ${docker_data_folder}/lam/lam.conf:/var/lib/ldap-account-manager/config/lam.conf
    environment:
      LAM_SKIP_PRECONFIGURE: "true"
    networks:
      - lam
      - ldap
    mem_limit: 200M
    memswap_limit: 200M
    labels:
      <<: *traefik
      traefik.docker.network: "${COMPOSE_PROJECT_NAME}_lam"
      traefik.http.routers.lam.rule: Host(`lam.${root_domain}`)
      # service
      traefik.http.services.lam.loadbalancer.server.port: "80"
      # Forward auth
      traefik.http.routers.lam.middlewares: traefik-forward-auth

  # SSO
  authelia:
    <<: *common
    depends_on:
      authelia-db:
        condition: service_healthy
      authelia-redis:
        condition: service_healthy
      openldap:
        condition: service_healthy
    image: docker.io/authelia/authelia:4.38.10@sha256:1af32be812f041c1f3a91190faf9a022e586b185251d26a29bcdf7982bcb3bc7
    cpu_count: 4
    user: ${UID}:${GID}
    mem_limit: 250M
    memswap_limit: 250M
    environment:
      # Global configuration
      AUTHELIA_JWT_SECRET: ${AUTHELIA_JWT_SECRET}
      AUTHELIA_DEFAULT_REDIRECTION_URL: https://${root_domain}
      # Notifier configuration
      AUTHELIA_NOTIFIER_SMTP_PASSWORD: ${SENDGRID_PASS}
      AUTHELIA_NOTIFIER_SMTP_SENDER: Authelia <authelia@${root_domain}>
      AUTHELIA_NOTIFIER_SMTP_STARTUP_CHECK_ADDRESS: ${letsencrypt_email}
      # LDAP backend configuration
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_BASE_DN: ${LDAP_BASE_DN}
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_USER: ${LDAP_ADMIN_USER}
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD: ${LDAP_ADMIN_PASSWORD}
      # Session configuration
      AUTHELIA_SESSION_DOMAIN: ${root_domain}
      # Storage configuration
      AUTHELIA_STORAGE_ENCRYPTION_KEY: ${AUTHELIA_DB_ENCRYPTION_KEY}
      AUTHELIA_STORAGE_POSTGRES_PASSWORD: ${AUTHELIA_DB_PASSWORD}
      AUTHELIA_SESSION_SECRET: ${AUTHELIA_SESSION_SECRET}
    command:
      - --config
      - /config/config.yml
    volumes:
      - ./config/authelia:/config:ro
    networks:
      - authelia-proxy
      - ldap
      - authelia
    labels:
      <<: *traefik
      traefik.docker.network: "${COMPOSE_PROJECT_NAME}_authelia-proxy"
      traefik.http.routers.authelia.rule: Host(`authelia.${root_domain}`)
      # service
      traefik.http.services.authelia.loadbalancer.server.port: "9091"
      traefik.http.middlewares.authelia.forwardauth.address: http://authelia:9091/api/verify?rd=https://authelia.${root_domain}/'
      traefik.http.middlewares.authelia.forwardauth.trustForwardHeader: "true"
      traefik.http.middlewares.authelia.forwardauth.authResponseHeaders: Remote-User, Remote-Groups, Remote-Name, Remote-Email
    healthcheck:
      start_period: 2m

  # DB for authelia
  authelia-db:
    <<: *common
    image: docker.io/postgres:14-bookworm
    cpu_count: 2
    mem_limit: 500M
    memswap_limit: 500M
    user: ${UID}:${GID}
    read_only: true
    environment:
      POSTGRES_USER: authelia
      POSTGRES_PASSWORD: ${AUTHELIA_DB_PASSWORD}
    tmpfs:
      - /run:mode=770,size=5M,uid=${UID},gid=${GID}
      - /tmp:mode=770,size=5M,uid=${UID},gid=${GID}
    volumes:
      - ${docker_data_folder}/authelia-db:/var/lib/postgresql/data
    networks:
      - authelia
    healthcheck: *postgres-healthcheck

  authelia-redis:
    <<: *common
    cpu_count: 2
    mem_limit: 250M
    memswap_limit: 250M
    read_only: true
    user: ${UID}:${GID}
    image: docker.io/redis:7-bookworm
    command:
      - redis-server
      - --save
      - "60"
      - "1"
    healthcheck: *redis-healthcheck
    volumes:
      - ${docker_data_folder}/authelia-redis:/data
    networks:
      - authelia

  # OIDC forward authentication for traefik
  traefik-forward-auth:
    image: docker.io/thomseddon/traefik-forward-auth:2.2.0@sha256:e875194d67e21c077f3de0b9d315bb3023a226f2cac81ddd9d02a4250ed89b4b
    <<: *common
    cpu_count: 2
    mem_limit: 100M
    memswap_limit: 100M
    read_only: true
    user: ${UID}:${GID}
    environment:
      PROVIDERS_GOOGLE_CLIENT_ID: ${OAUTH2_PROXY_CLIENT_ID}
      PROVIDERS_GOOGLE_CLIENT_SECRET: ${OAUTH2_PROXY_CLIENT_SECRET}
      SECRET: ${OAUTH2_PROXY_COOKIE_SECRET}
      #OIDC_ISSUER: https://accounts.google.com
      WHITELIST: "${allowed_emails}"
      AUTH_HOST: "oauth.${root_domain}"
      COOKIE_DOMAIN: "${root_domain}"
      COOKIE_NAME: _google_forward_auth
      CSRF_COOKIE_NAME: _google_forward_auth_csrf
    networks:
      - traefik
    labels:
      <<: *traefik
      # HTTP entrypoint
      traefik.http.routers.traefik-forward-auth.rule: Host(`oauth.${root_domain}`)
      # service
      traefik.http.services.traefik-forward-auth.loadbalancer.server.port: "4181"
      # Forward auth
      traefik.http.middlewares.traefik-forward-auth.forwardauth.address: http://traefik-forward-auth:4181
      traefik.http.routers.traefik-forward-auth.middlewares: traefik-forward-auth
      traefik.http.middlewares.traefik-forward-auth.forwardauth.authResponseHeaders: X-Forwarded-User

networks:
  watchtower:
    enable_ipv6: true
  traefik:
    enable_ipv6: true
  ldap:
    # FIXME OpenLDAP container does not bind to IPv6
    enable_ipv6: false
    internal: true
  authelia:
    enable_ipv6: true
    internal: true
  nextcloud:
    enable_ipv6: true
    internal: true
  samba:
    enable_ipv6: true
  ssh:
    enable_ipv6: true
  homer:
    enable_ipv6: true
    internal: true
  nextcloud-proxy:
    enable_ipv6: true
  robots:
    enable_ipv6: true
    internal: true
  netdata:
    enable_ipv6: true
    internal: true
  scrutiny:
    enable_ipv6: true
  lam:
    enable_ipv6: true
    internal: true
  authelia-proxy:
    enable_ipv6: true
  flaresolverr:
    enable_ipv6: true
  traefik-socket-proxy:
    enable_ipv6: true
    internal: true
  watchtower-socket-proxy:
    enable_ipv6: true
    internal: true
  netdata-socket-proxy:
    enable_ipv6: true
    internal: true
  librespeed:
    enable_ipv6: true
  tandoor:
    enable_ipv6: true
  homeassistant:
    enable_ipv6: true
  miniflux:
    enable_ipv6: true
    internal: true
  miniflux-proxy:
    enable_ipv6: true
  lldap:
    enable_ipv6: true
  lldap-db:
    enable_ipv6: true
    internal: true
  sftpgo:
    enable_ipv6: true

volumes:
  robots-nginx-cache:
  robots-nginx-pid:
  robots-nginx-conf:

configs:
  homassistant_linky_config:
    content: |
      {
        "meters": [
          {
            "prm": "${PRM}",
            "token": "${CONSO_API_TOKEN}",
            "name": "Consommation Linky",
            "action": "sync",
            "production": false
          }
        ],
        "costs": []
      }
