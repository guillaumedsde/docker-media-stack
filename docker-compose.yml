# THE MEDIA STACK #
# this docker-compose file will get a selection of media downloading/management webapps
# I've tried to simplify getting started as much as possible
#   1. configure your desired variables in the .env file
#   2. run `docker-compose up -d` from the folder with this docker-copose.yml folder
# NOTE this process is not fully automated and individual configuration of webapps is still required after docker compose
version: "2.4"

# basic common configuration for most containers
x-conf: &conf
  TZ: ${TZ}
  PGID: ${GID}
  PUID: ${UID}

# container restart policy
x-restart: &restart
  restart: always

# container logging policy
x-logging: &logging
  logging:
    driver: "json-file"
    options:
      max-file: "5"
      max-size: "10m"

# traefik security headers
x-securityHeaders: &securityHeaders # redirect non SSL requests to SSL
  traefik.frontend.headers.SSLRedirect: "true"
  # default is same host as request, which is what we want
  #traefik.frontend.headers.SSLHost: "${tld}"
  traefik.frontend.headers.STSSeconds: "315360000"
  traefik.frontend.headers.STSIncludeSubdomains: "true"
  #traefik.frontend.headers.STSPreload: "true"
  # forbid iframes
  traefik.frontend.headers.frameDeny: "true"
  traefik.frontend.headers.browserXSSFilter: "true"
  traefik.frontend.headers.contentTypeNosniff: "true"
  traefik.frontend.headers.customFrameOptionsValue: "SAMEORIGIN"
  traefik.frontend.passHostHeader: "true"
  #traefik.frontend.headers.contentSecurityPolicy: "default-src data: https:; script-src data: 'unsafe-inline' https://*.${root_domain}; style-src data: 'unsafe-inline' https:; frame-src https://*.${root_domain}"
  traefik.frontend.headers.customResponseHeaders: "Feature-Policy:camera 'none'; fullscreen 'none'; geolocation 'none'; microphone 'none'; payment 'none'; speaker 'none'; usb 'none'; vibrate 'none'; vr 'none';||server:''||X-Powered-By:''"

# oauth forward-auth SSO configuration
x-oauthLabels: &oauthLabels
  traefik.frontend.auth.forward.address: "http://traefik-forward-auth:4181"
  traefik.frontend.auth.forward.authResponseHeaders: "X-Forwarded-User"
  traefik.frontend.auth.forward.trustForwardHeader: "true"

# keycloak SSO
x-keycloakLabels: &keycloakLabels
  traefik.frontend.auth.forward.address: "http://traefik-forward-auth-keycloak:4181"
  traefik.frontend.auth.forward.authResponseHeaders: "X-Forwarded-User"
  traefik.frontend.auth.forward.trustForwardHeader: "true"

services:
  # Reverse proxy with automatic SSL certificate generation
  traefik:
    image: traefik:maroilles
    # command: --logLevel=DEBUG
    hostname: traefik.${root_domain}
    environment:
      OVH_ENDPOINT: ${OVH_ENDPOINT}
      OVH_APPLICATION_KEY: ${OVH_APPLICATION_KEY}
      OVH_APPLICATION_SECRET: ${OVH_APPLICATION_SECRET}
      OVH_CONSUMER_KEY: ${OVH_CONSUMER_KEY}
    labels:
      <<: *securityHeaders
      <<: *keycloakLabels
      traefik.enable: "true"
      traefik.frontend.rule: Host:traefik.${root_domain}
      traefik.port: "8080"
    <<: *restart
    <<: *logging
    networks:
      - traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${docker_data_folder}/traefik/traefik.toml:/traefik.toml
      - ${docker_data_folder}/traefik/acme.json:/acme.json
    ports:
      - 80:80
      - 443:443

  # watchtower container to update images
  # NOTE to update the containers images' watchtower needs to restart the containers this implies some downtime when it does
  # NOTE watchtower also updates itself
  watchtower:
    image: containrrr/watchtower:latest
    <<: *restart
    <<: *logging
    read_only: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_NOTIFICATIONS: "gotify"
      WATCHTOWER_NOTIFICATION_GOTIFY_URL: "${WATCHTOWER_NOTIFICATION_GOTIFY_URL}"
      WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN: "${WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN}"
    networks:
      - watchtower
    command: ["--cleanup", "--schedule", "0 0 5 * * *"]

  # Torrent client
  qbittorrent:
    <<: *restart
    <<: *logging
    cap_add:
      - NET_ADMIN
    volumes:
      - ${docker_data_folder}/qbittorrent-openvpn:/config
      - ${data_folder}:/data
      - ${torrent_blackhole}:/blackhole
      - /etc/localtime:/etc/localtime:ro
    networks:
      - traefik
    environment:
      <<: *conf
      OPENVPN_PROVIDER: WINDSCRIBE
      OPENVPN_CONFIG: France-udp
      OPENVPN_USERNAME: ${openvpn_user}
      OPENVPN_PASSWORD: ${openvpn_password}
      LAN: 192.168.0.0/24
      DNS: "192.168.0.1"
    labels:
      <<: *securityHeaders
      <<: *keycloakLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:torrent.${root_domain},qbittorrent.${root_domain}"
      traefik.port: "8080"
    image: guillaumedsde/alpine-qbittorrent-openvpn:latest

  # jackett tracker site scraper with API
  jackett:
    hostname: jackett.${root_domain}
    image: guillaumedsde/jackett-distroless:latest
    <<: *restart
    <<: *logging
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/jackett:/config
      - ${torrent_blackhole}:/blackhole
    tmpfs:
      - "/var:rw,exec"
      - "/tmp:rw,exec"
    read_only: true
    networks:
      - traefik
    environment:
      <<: *conf
      S6_READ_ONLY_ROOT: "1"
    labels:
      <<: *securityHeaders
      traefik.enable: "true"
      traefik.frontend.rule: "Host:jackett.${root_domain}"
      traefik.port: "9117"

  # jackett tracker site scraper with API
  hydra:
    image: guillaumedsde/nzbhydra2-distroless:latest
    hostname: hydra.${root_domain}
    <<: *restart
    <<: *logging
    depends_on:
      - "jackett"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/hydra:/config
      - ${torrent_blackhole}:/blackhole
    tmpfs:
      - "/var:rw,exec"
      - "/tmp:rw,exec"
    read_only: true
    networks:
      - traefik
    environment:
      <<: *conf
      S6_READ_ONLY_ROOT: 1
    labels:
      <<: *securityHeaders
      <<: *keycloakLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:hydra.${root_domain}"
      traefik.port: "5076"

  # radarr, webapp for downloading movies through torrent client
  # queries are done with jackett
  radarr:
    hostname: movies.${root_domain}
    image: linuxserver/radarr:nightly
    <<: *restart
    <<: *logging
    depends_on:
      - "jackett"
      - "qbittorrent"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/radarr:/config
      - ${data_folder}:/data
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *securityHeaders
      <<: *keycloakLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:movies.${root_domain},radarr.${root_domain}"
      traefik.port: "7878"

  # sonarr, webapp for downloading series through torrent client
  # queries are done with jackett
  sonarr:
    hostname: series.${root_domain}
    image: linuxserver/sonarr:preview
    <<: *restart
    <<: *logging
    depends_on:
      - "jackett"
      - "qbittorrent"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/sonarr:/config
      - ${data_folder}:/data
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *securityHeaders
      <<: *keycloakLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:series.${root_domain},sonarr.${root_domain}"
      traefik.port: "8989"

  # lidarr, webapp for downloading music through torrent client
  # queries are done with jackett
  lidarr:
    hostname: music.${root_domain}
    image: linuxserver/lidarr:latest
    <<: *restart
    <<: *logging
    depends_on:
      - "jackett"
      - "qbittorrent"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/lidarr:/config
      - ${data_folder}:/data
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *securityHeaders
      <<: *keycloakLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:music.${root_domain},lidarr.${root_domain}"
      traefik.port: "8686"

  # bazarr, webapp for downloading subtitles
  bazarr:
    hostname: subtitles.${root_domain}
    image: hotio/bazarr:stable-ffsubsync
    <<: *restart
    <<: *logging
    depends_on:
      - "radarr"
      - "sonarr"
    environment:
      <<: *conf
    labels:
      <<: *securityHeaders
      <<: *keycloakLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:subtitles.${root_domain},bazarr.${root_domain}"
      traefik.port: "6767"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/bazarr:/config
      - ${data_folder}:/data
    networks:
      - traefik

  # lazylibrarian, webapp for downloading books through torrent client
  # queries are done with jackett
  lazylibrarian:
    hostname: books.${root_domain}
    image: linuxserver/lazylibrarian:latest
    <<: *restart
    <<: *logging
    depends_on:
      - "jackett"
      - "qbittorrent"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/lazylibrarian:/config
      - ${data_folder}/books:/books
      - ${data_folder}/download/books:/downloads
      - ${data_folder}:/data
    networks:
      - traefik
    environment:
      <<: *conf
      DOCKER_MODS: linuxserver/calibre-web:calibre
    labels:
      <<: *securityHeaders
      <<: *keycloakLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:books.${root_domain},lazylibrarian.${root_domain}"
      traefik.port: "5299"

  # mylar, webapp for downloading comics
  mylar:
    hostname: comics.${root_domain}
    image: hotio/mylar3:latest
    <<: *restart
    <<: *logging
    depends_on:
      - "jackett"
      - "qbittorrent"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/mylar:/config
      - ${data_folder}/comics:/comics
      - ${data_folder}/download/comics:/downloads
      - ${data_folder}:/data
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *securityHeaders
      <<: *keycloakLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:comics.${root_domain},mylar.${root_domain}"
      traefik.port: "8090"

  # homer is a homepage container
  homer:
    hostname: ${root_domain}
    image: b4bz/homer:latest
    <<: *restart
    <<: *logging
    networks:
      - traefik
    volumes:
      - ${docker_data_folder}/homer/config.yml:/www/config.yml:ro
      - ${docker_data_folder}/homer/assets:/www/assets:ro
    labels:
      <<: *securityHeaders
      traefik.enable: "true"
      traefik.frontend.rule: "Host:home.${root_domain}, ${root_domain}, homer.${root_domain}"
      traefik.port: "8080"

  # plex media server
  plex:
    hostname: plex.${root_domain}
    image: linuxserver/plex:latest
    <<: *restart
    <<: *logging
    # note use the host network mode on first startup,
    # then you can use the regular bridge mode
    # network_mode: "host"
    ports:
      - "32400:32400"
      - "32400:32400/udp"
      - "32469:32469"
      - "32469:32469/udp"
      - "5353:5353/udp"
      - "1900:1900/udp"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/plex:/config
      - ${data_folder}:/data
    networks:
      - traefik
    environment:
      VERSION: docker
      PLEX_CLAIM: ${PLEX_CLAIM_TOKEN}
      <<: *conf
    labels:
      <<: *securityHeaders
      traefik.enable: "true"
      traefik.frontend.rule: "Host:plex.${root_domain}"
      traefik.port: "32400"

  # jellyfin media server
  jellyfin:
    container_name: jellyfin
    hostname: jellyfin.${root_domain}
    image: linuxserver/jellyfin:latest
    <<: *restart
    <<: *logging
    depends_on:
      - openldap
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/jellyfin:/config
      - ${data_folder}:/data:ro
    networks:
      - traefik
      - ldap
    environment:
      <<: *conf
    labels:
      <<: *securityHeaders
      traefik.enable: "true"
      traefik.frontend.rule: "Host:jellyfin.${root_domain}"
      traefik.port: "8096"
      traefik.docker.network: traefik

  # ombi, plex media requests
  ombi:
    hostname: ombi.${root_domain}
    image: linuxserver/ombi:latest
    <<: *restart
    <<: *logging
    depends_on:
      - "sonarr"
      - "radarr"
      - "lidarr"
      - "plex"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/ombi:/config
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *securityHeaders
      traefik.enable: "true"
      traefik.frontend.rule: "Host:ombi.${root_domain},requests.${root_domain}"
      traefik.port: "3579"

  # Alternative to Calibre content server for storing books
  cops:
    hostname: cops.${root_domain}
    image: linuxserver/cops:latest
    <<: *restart
    <<: *logging
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/cops:/config
      - ${data_folder}/books:/books
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *securityHeaders
      <<: *keycloakLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:cops.${root_domain}"
      traefik.port: "80"

  # calibre-web, for reading ebooks
  calibre-web:
    hostname: read.${root_domain}
    image: linuxserver/calibre-web:latest
    <<: *restart
    <<: *logging
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/calibre-web:/config
      - ${data_folder}/books:/books
    networks:
      - traefik
    environment:
      <<: *conf
      DOCKER_MODS: linuxserver/calibre-web:calibre
    labels:
      <<: *securityHeaders
      <<: *keycloakLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:read.${root_domain},calibre-web.${root_domain}"
      traefik.port: "8083"

  # gollum for hosting documentation
  gollum:
    hostname: doc.${root_domain}
    image: cuotos/gollum-alpine:latest
    <<: *restart
    <<: *logging
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/gollum:/wiki
    networks:
      - traefik
    environment:
      <<: *conf
      GOLLUMARGS: "--live-preview --allow-uploads dir"
    labels:
      <<: *securityHeaders
      <<: *keycloakLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:doc.${root_domain},docs.${root_domain},gollum.${root_domain}"
      traefik.port: "4567"

  # unmanic, transcode video files in the background
  unmanic:
    hostname: transcode.${root_domain}
    image: josh5/unmanic:latest
    <<: *restart
    <<: *logging
    networks:
      - traefik
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/unmanic:/config
      - ${data_folder}/documentaries:/library/
      - /tmp/unmanic:/tmp/unmanic
    environment:
      <<: *conf
    labels:
      <<: *securityHeaders
      <<: *keycloakLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:transcode.${root_domain},unmanic.${root_domain}"
      traefik.port: "8888"

  # pyload for downloading files
  pyload:
    image: linuxserver/pyload
    <<: *restart
    <<: *logging
    hostname: download.${root_domain}
    environment:
      <<: *conf
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/pyload:/config
      - ${data_folder}/download/other:/downloads
      - ${data_folder}/documentaries:/documentaries
      - ${data_folder}/software:/software
      - ${data_folder}/games:/games
    labels:
      <<: *securityHeaders
      <<: *keycloakLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:download.${root_domain},pyload.${root_domain}"
      traefik.port: "8000"
    networks:
      - traefik

  # youtube-dl for downloading videos
  youtube-dl:
    image: kmb32123/youtube-dl-server:latest
    <<: *restart
    <<: *logging
    hostname: youtube-dl.${root_domain}
    environment:
      <<: *conf
    networks:
      - traefik
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${data_folder}/documentaries:/youtube-dl
    labels:
      <<: *securityHeaders
      <<: *keycloakLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:youtube-dl.${root_domain},yt-dl.${root_domain}"
      traefik.port: "8080"

  # JS CMS
  ghost_margot:
    environment:
      <<: *conf
      url: "https://margot.${tld}"
      mail__transport: SMTP
      mail__from: ghost@${root_domain}
      mail__options__service: SendGrid
      mail__options__host: smtp.sendgrid.net
      mail__options__port: "465"
      mail__options__secureConnection: "true"
      mail__options__auth__user: apikey
      mail__options__auth__pass: ${SENDGRID_PASS}
    labels:
      <<: *securityHeaders
      traefik.enable: "true"
      traefik.frontend.rule: "Host:margot.${tld}"
      traefik.port: "2368"
    volumes:
      - ${docker_data_folder}/ghost_margot:/var/lib/ghost/content
      - /etc/localtime:/etc/localtime:ro
    networks:
      - traefik
    <<: *restart
    <<: *logging
    image: ghost:alpine

  # JS CMS
  ghost_guillaume:
    environment:
      <<: *conf
      url: "https://blog.guillaume.${tld}"
      mail__transport: SMTP
      mail__from: ghost@${root_domain}
      mail__options__service: SendGrid
      mail__options__host: smtp.sendgrid.net
      mail__options__port: "465"
      mail__options__secureConnection: "true"
      mail__options__auth__user: apikey
      mail__options__auth__pass: ${SENDGRID_PASS}
    labels:
      <<: *securityHeaders
      traefik.enable: "true"
      traefik.frontend.rule: "Host:blog.guillaume.${tld}"
      traefik.port: "2368"
    volumes:
      - ${docker_data_folder}/ghost_guillaume:/var/lib/ghost/content
      - /etc/localtime:/etc/localtime:ro
    networks:
      - traefik
    <<: *restart
    <<: *logging
    image: ghost:alpine

  # personal cloud
  nextcloud:
    hostname: cloud.${root_domain}
    depends_on:
      - nextcloud-postgres
      - samba
      - openldap
    volumes:
      - ${docker_data_folder}/nextcloud:/var/www/html
      - ${data_folder}:/data
    networks:
      - traefik
      - nextcloud
      - ldap
    environment:
      <<: *conf
      POSTGRES_DB: nextcloud
      POSTGRES_USER: nextcloud
      POSTGRES_PASSWORD: ${nextcloud_db_pass}
      POSTGRES_HOST: nextcloud-postgres
      SMTP_HOST: smtp.sendgrid.net
      SMTP_SECURE: ssl
      SMTP_PORT: "465"
      SMTP_AUTHTYPE: login
      SMTP_NAME: apikey
      SMTP_PASSWORD: ${SENDGRID_PASS}
      MAIL_FROM_ADDRESS: nextcloud
      MAIL_DOMAIN: ${root_domain}
    labels:
      <<: *securityHeaders
      traefik.enable: "true"
      traefik.frontend.rule: "Host:cloud.${root_domain},nextcloud.${root_domain}"
      traefik.port: "80"
      traefik.docker.network: traefik
      traefik.frontend.redirect.permanent: "true"
      traefik.frontend.redirect.regex: https://(.*)/.well-known/(card|cal)dav
      traefik.frontend.redirect.replacement: https://$$1/remote.php/dav/
    <<: *restart
    <<: *logging
    image: guillaumedsde/nextcloud-samba:latest

  # databse for nextcloud
  nextcloud-postgres:
    environment:
      POSTGRES_PASSWORD: ${nextcloud_db_pass}
      POSTGRES_USER: nextcloud
    volumes:
      - ${docker_data_folder}/nextcloud-postgres:/var/lib/postgresql/data
    networks:
      - nextcloud
    <<: *restart
    <<: *logging
    image: postgres:alpine

  samba:
    environment:
      SAMBA_LDAP_PASSWORD: ${LDAP_ADMIN_PASSWORD}
      SID: ${SID}
    ports:
      - "139:139"
      - "445:445"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/samba/nslcd.conf:/etc/nslcd.conf:ro
      - ${docker_data_folder}/samba/smb.conf:/etc/samba/smb.conf:ro
      - ${docker_data_folder}/samba/secrets.tdb:/var/lib/samba/private/secrets.tdb
      - /data:/data
    depends_on:
      - openldap
    <<: *restart
    <<: *logging
    networks:
      - samba
      - ldap
    image: guillaumedsde/samba-ldap

  # gitlab runner
  gitlab-runner:
    <<: *restart
    <<: *logging
    networks:
      - gitlab-runner
    volumes:
      - ${docker_data_folder}/gitlab-runner:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock
    image: gitlab/gitlab-runner:alpine

  # automation platform
  huginn:
    hostname: huginn.${root_domain}
    depends_on:
      - "huginn-mariadb"
    environment:
      <<: *conf
      HUGINN_DOMAIN: huginn.${root_domain}
      HUGINN_RAILS_ENV: production
      HUGINN_INVITATION_CODE: ${HUGINN_INVITATION_CODE}
      HUGINN_DATABASE_NAME: huginn
      HUGINN_IMPORT_DEFAULT_SCENARIO_FOR_ALL_USERS: "false"
      HUGINN_DATABASE_USERNAME: root
      HUGINN_DATABASE_PASSWORD: ${HUGINN_DB_PASS}
      MYSQL_PORT_3306_TCP_ADDR: huginn-mariadb
      MYSQL_PORT_3306_TCP_PORT: "3306"
      HUGINN_DATABASE_ENCODING: utf8mb4
      HUGINN_SMTP_DOMAIN: ${root_domain}
      HUGINN_SMTP_USER_NAME: apikey
      HUGINN_SMTP_PASSWORD: ${SENDGRID_PASS}
      HUGINN_SMTP_SERVER: smtp.sendgrid.net
      HUGINN_SMTP_PORT: "465"
      HUGINN_SMTP_AUTHENTICATION: login
      HUGINN_SMTP_ENABLE_STARTTLS_AUTO: "false"
      HUGINN_SMTP_SSL: "true"
      HUGINN_EMAIL_FROM_ADDRESS: huginn@${root_domain}
    volumes:
      - ${docker_data_folder}/huginn/mysql-data:/var/lib/mysql
    networks:
      - traefik
      - huginn
    labels:
      <<: *securityHeaders
      traefik.enable: "true"
      traefik.frontend.rule: "Host:huginn.${root_domain}"
      traefik.port: "3000"
      traefik.docker.network: traefik
    <<: *restart
    <<: *logging
    image: huginn/huginn:latest

  huginn-mariadb:
    image: mariadb
    volumes:
      - ${docker_data_folder}/huginn/mysql-data:/var/lib/mysql
    networks:
      - huginn
    <<: *restart
    <<: *logging
    environment:
      MYSQL_ROOT_PASSWORD: ${HUGINN_DB_PASS}

  ##################################################################
  # Monitoring

  # tautulli, plex media server monitoring
  tautulli:
    hostname: tautulli.${root_domain}
    image: linuxserver/tautulli:latest
    <<: *restart
    <<: *logging
    depends_on:
      - "plex"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/tautulli:/config
      - ${data_folder}:/data
      - "${docker_data_folder}/plex/Library/Application Support/Plex Media Server/Logs:/logs:ro"
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *securityHeaders
      <<: *keycloakLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:tautulli.${root_domain},stats.${root_domain}"
      traefik.port: "8181"

  # netdata, server monitoring
  netdata:
    hostname: netdata.${root_domain}
    image: netdata/netdata:latest
    <<: *restart
    <<: *logging
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${docker_data_folder}/netdata/health_alarm_notify.conf:/etc/netdata/health_alarm_notify.conf
    networks:
      - traefik
    environment:
      <<: *conf
      PGID: ${docker_group_id}
    labels:
      <<: *securityHeaders
      <<: *keycloakLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:status.${root_domain},netdata.${root_domain}"
      traefik.port: "19999"
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined

  # Diskover web UI for disk usage analysis
  diskover:
    hostname: diskover.${root_domain}
    image: linuxserver/diskover:latest
    environment:
      <<: *conf
      REDIS_HOST: diskover-redis
      REDIS_PORT: "6379"
      ES_HOST: diskover-elasticsearch
      ES_PORT: "9200"
      ES_USER: elastic
      # NOTE: default password for ES is "changeme", cannot set it through environement with ES<6.1
      ES_PASS: ${DISKOVER_ES_PASSWORD}
      RUN_ON_START: "true"
      USE_CRON: "true"
      DISKOVER_OPTS: "--finddupes"
    volumes:
      - ${docker_data_folder}/diskover/config:/config
      - ${data_folder}:/data
    networks:
      - traefik
      - diskover
    # TODO: reverse proxy all ports not just 80
    # ports:
    #   - 80:80
    #   - 9181:9181
    #   - 9999:9999
    # TODO: probably need to ajust this
    mem_limit: 4096m
    <<: *restart
    <<: *logging
    depends_on:
      - diskover-elasticsearch
      - diskover-redis
    labels:
      <<: *securityHeaders
      <<: *keycloakLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:diskover.${root_domain},disk.${root_domain}"
      traefik.port: "80"
      traefik.docker.network: traefik

  # ElasticSearch Instance for diskover
  diskover-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.9
    volumes:
      - ${docker_data_folder}/diskover-elasticsearch/data:/usr/share/elasticsearch/data
    # TODO: seperate network
    networks:
      - diskover
    environment:
      - bootstrap.memory_lock=true
      # TODO: probably need to ajust this
      - "ES_JAVA_OPTS=-Xms2048m -Xmx2048m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    <<: *restart
    <<: *logging

  # Redis instance for diskover
  diskover-redis:
    image: redis:4-alpine
    volumes:
      - ${docker_data_folder}/diskover-redis:/data
    # TODO: seperate network
    networks:
      - diskover
    <<: *restart
    <<: *logging

  ##################################################################
  # Authentication

  # LDAP server
  openldap:
    hostname: ldap.${root_domain}
    image: osixia/openldap:latest
    environment:
      HOSTNAME: ldap.${root_domain}
      LDAP_DOMAIN: ${root_domain}
      LDAP_ORGANISATION: ${LDAP_ORGANISATION}
      LDAP_ADMIN_PASSWORD: ${LDAP_ADMIN_PASSWORD}
      LDAP_TLS: "true"
      LDAP_TLS_CRT_FILENAME: certificate.crt
      LDAP_TLS_KEY_FILENAME: privatekey.key
      LDAP_TLS_CA_CRT_FILENAME: certificate.crt
      LDAP_OPENLDAP_UID: ${UID}
      LDAP_OPENLDAP_GID: ${GID}
    command: "--copy-service --loglevel debug"
    <<: *restart
    <<: *logging
    networks:
      - ldap
    ports:
      - 389:389
      - 636:636
    volumes:
      - ${docker_data_folder}/openldap/ldap:/var/lib/ldap
      - ${docker_data_folder}/openldap/slapd.d:/etc/ldap/slapd.d
      # ubuntu path for Samba LDIF, this might be different with other distributions
      - ./ldap_templates/samba/ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom/samba.ldif:ro
      # gotten from https://ubuntu.com/server/docs/samba-openldap-backend
      - ./ldap_templates/samba_indices.ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom/samba_indices.ldif:ro
      - ./ldap_templates/memberof.ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom/memberof.ldif:ro
      # certificates
      - ${docker_data_folder}/openldap/certs/*.${root_domain}:/container/service/slapd/assets/certs:ro

  # OpenLDAP certificate handler
  openldap-acme:
    image: neilpang/acme.sh:latest
    network_mode: host
    user: ${UID}
    environment:
      OVH_AK: ${OVH_AK}
      OVH_AS: ${OVH_AS}
      OVH_END_POINT: ovh-eu
    command:
      - daemon
    volumes:
      - ${docker_data_folder}/openldap/certs:/acme.sh

  # LDAP Server management web GUI
  lam:
    image: ldapaccountmanager/lam:stable
    volumes:
      - ${docker_data_folder}/lam/config.cfg:/etc/ldap-account-manager/config.cfg
      - ${docker_data_folder}/lam/olloix.conf:/var/lib/ldap-account-manager/config/olloix.conf
    environment:
      LAM_SKIP_PRECONFIGURE: "true"
    networks:
      - traefik
      - ldap
    depends_on:
      - openldap
    <<: *restart
    <<: *logging
    labels:
      <<: *securityHeaders
      <<: *oauthLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:lam.${root_domain}"
      traefik.port: "80"
      traefik.docker.network: traefik

  # SSO
  keycloak:
    image: jboss/keycloak:latest
    environment:
      # Technically, this could be auto-detected, but we prefer to be prescriptive
      DB_VENDOR: postgres
      DB_DATABASE: keycloak
      DB_ADDR: keycloak-db
      DB_USER: keycloak
      DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
      # This is required to run keycloak behind traefik
      PROXY_ADDRESS_FORWARDING: "true"
      KEYCLOAK_HOSTNAME: keycloak.${root_domain}
    <<: *restart
    <<: *logging
    depends_on:
      - keycloak-db
      - openldap
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - traefik
      - ldap
      - keycloak
    labels:
      <<: *securityHeaders
      traefik.enable: "true"
      traefik.frontend.rule: "Host:keycloak.${root_domain}"
      traefik.port: "8080"
      traefik.docker.network: traefik

  # DB for keycloak
  keycloak-db:
    <<: *restart
    <<: *logging
    environment:
      # Tell Postgress what user/password to create
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    image: postgres:12-alpine
    volumes:
      - ${docker_data_folder}/keycloak-db:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - keycloak

  # OIDC forward authentication for traefik
  traefik-forward-auth:
    image: thomseddon/traefik-forward-auth:latest
    <<: *restart
    <<: *logging
    environment:
      PROVIDERS_GOOGLE_CLIENT_ID: ${OAUTH2_PROXY_CLIENT_ID}
      PROVIDERS_GOOGLE_CLIENT_SECRET: ${OAUTH2_PROXY_CLIENT_SECRET}
      SECRET: ${OAUTH2_PROXY_COOKIE_SECRET}
      #OIDC_ISSUER: https://accounts.google.com
      WHITELIST: "${allowed_emails}"
      AUTH_HOST: "oauth.${root_domain}"
      COOKIE_DOMAIN: "${root_domain}"
      COOKIE_NAME: _google_forward_auth
      CSRF_COOKIE_NAME: _google_forward_auth_csrf
    networks:
      - traefik
    labels:
      <<: *oauthLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:oauth.${root_domain}"
      traefik.port: "4181"

  # OIDC forward authentication for traefik
  traefik-forward-auth-keycloak:
    image: thomseddon/traefik-forward-auth:latest
    <<: *restart
    <<: *logging
    environment:
      PROVIDERS_OIDC_CLIENT_ID: ${KEYCLOAK_OIDC_CLIENT_ID}
      PROVIDERS_OIDC_CLIENT_SECRET: ${KEYCLOAK_OIDC_CLIENT_SECRET}
      SECRET: ${KEYCLOAK_OIDC_COOKIE_SECRET}
      PROVIDERS_OIDC_ISSUER_URL: https://keycloak.${root_domain}/auth/realms/${KEYCLOAK_REALM}
      AUTH_HOST: auth.${root_domain}
      COOKIE_DOMAIN: ${root_domain}
      DEFAULT_PROVIDER: oidc
      COOKIE_NAME: _keycloak_forward_auth
      CSRF_COOKIE_NAME: _keycloak_forward_auth_csrf
    networks:
      - traefik
    depends_on:
      - keycloak
    labels:
      <<: *keycloakLabels
      traefik.enable: "true"
      traefik.frontend.rule: "Host:auth.${root_domain}"
      traefik.port: "4181"

networks:
  watchtower:
    driver: bridge
    name: watchtower
  traefik:
    driver: bridge
    name: traefik
  diskover:
    driver: bridge
    internal: true
    name: diskover
  ldap:
    driver: bridge
    internal: true
    name: ldap
  keycloak:
    driver: bridge
    internal: true
    name: keycloak
  nextcloud:
    driver: bridge
    internal: true
    name: nextcloud
  huginn:
    driver: bridge
    internal: true
    name: huginn
  samba:
    driver: bridge
    name: samba
  gitlab-runner:
    driver: bridge
    name: gitlab-runner
