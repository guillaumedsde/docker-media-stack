# THE MEDIA STACK #
# this docker-compose file will get a selection of media downloading/management webapps
# I've tried to simplify getting started as much as possible
#   1. configure your desired variables in the .env file
#   2. run `docker-compose up -d` from the folder with this docker-copose.yml folder
# NOTE this process is not fully automated and individual configuration of webapps is still required after docker compose
version: "3.4"

# basic common configuration for most containers
x-conf: &conf
  TZ: ${TZ}
  PGID: ${GID}
  PUID: ${UID}

# container restart policy
x-restart: &restart
  restart: on-failure:5

# list of networks to be proxied by NGINX
x-proxiednetworks: &proxiednetworks
    mattermost:
    pyload:
    bookstack:

# traefik security headers
x-securityHeaders: &securityHeaders
  # redirect non SSL requests to SSL
  traefik.frontend.headers.SSLRedirect: "true"
  # default is same host as request, which is what we want
  #traefik.frontend.headers.SSLHost: "${tld}"
  traefik.frontend.headers.STSSeconds: "315360000"
  #traefik.frontend.headers.STSIncludeSubdomains: "true"
  #traefik.frontend.headers.STSPreload: "true"
  # forbid iframes
  traefik.frontend.headers.frameDeny: "true"
  traefik.frontend.headers.browserXSSFilter: "true"
  traefik.frontend.headers.contentTypeNosniff: "true"
  traefik.frontend.headers.customFrameOptionsValue: "SAMEORIGIN"
  traefik.frontend.headers.customResponseHeaders: "Feature-Policy:camera 'none'; fullscreen 'none'; geolocation 'none'; microphone 'none'; payment 'none'; speaker 'none'; usb 'none'; vibrate 'none'; vr 'none';||server:''||X-Powered-By:''"

# oauth configuration
x-oauthLabels: &oauthLabels
  traefik.frontend.auth.forward.address: "http://traefik-forward-auth:4181"
  traefik.frontend.auth.forward.authResponseHeaders: "X-Forwarded-User"
  traefik.frontend.auth.forward.trustForwardHeader: "true"

services:
    traefik:
      image: traefik:alpine
      command: --docker --logLevel=DEBUG
      container_name: traefik
      hostname: traefik.${root_domain}
      expose:
        - 8080
      environment:
        OVH_ENDPOINT: ${OVH_ENDPOINT}
        OVH_APPLICATION_KEY: ${OVH_APPLICATION_KEY}
        OVH_APPLICATION_SECRET: ${OVH_APPLICATION_SECRET}
        OVH_CONSUMER_KEY: ${OVH_CONSUMER_KEY}
      labels:
        <<: *oauthLabels
        traefik.enable: "true"
        traefik.frontend.rule: Host:traefik.${root_domain}
        traefik.port: "8080"
        traefik.frontend.auth.basic.users: ${traefik_credentials}
      restart: always
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ${docker_data_folder}/traefik/traefik.toml:/traefik.toml
        - ${docker_data_folder}/traefik/acme.json:/acme.json
      networks:
        <<: *proxiednetworks
        proxy:
      ports:
        - 80:80
        - 443:443
    # OIDC forward authentication for traefik
    traefik-forward-auth:
      container_name: traefik-forward-auth
      hostname: oauth.${root_domain}
      image: funkypenguin/traefik-forward-auth:latest
      <<: *restart
      environment:
        CLIENT_ID: ${OAUTH2_PROXY_CLIENT_ID}
        CLIENT_SECRET: ${OAUTH2_PROXY_CLIENT_SECRET}
        SECRET: ${OAUTH2_PROXY_COOKIE_SECRET}
        OIDC_ISSUER: https://accounts.google.com
        COOKIE_DOMAINS: "${root_domain}"
        WHITELIST: "${allowed_emails}"
        AUTH_HOST: "oauth.${root_domain}"
      labels:
        <<: *oauthLabels
        traefik.enable: "true"
        traefik.backend: "traefik-forward-auth"
        traefik.frontend.rule: "Host:oauth.${root_domain}"
        traefik.port: "4181"
        traefik.frontend.auth.forward.address: "http://traefik-forward-auth:4181"
        traefik.frontend.auth.forward.trustForwardHeader: "true"
    # watchtower container to update images
    # NOTE to update the containers images' watchtower needs to restart the containers this implies some downtime when it does
    # NOTE watchtower also updates itself
    watchtower:
      container_name: watchtower
      image: v2tec/watchtower:latest
      <<: *restart
      read_only: true
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      environment:
        WATCHTOWER_NOTIFICATIONS: slack
        WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL: ${slack_webhook_url}
        WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER: watchtower_${root_domain}
      networks:
        - watchtower
      security_opt:
        - no-new-privileges
      command: ["--cleanup", "--schedule", "0 0 5 * * *"]
    # qbittorrent torrent client container
    qbittorrent:
      container_name: qbittorrent
      hostname: torrent.${root_domain}
      image: binhex/arch-qbittorrentvpn:latest
      <<: *restart
      privileged: true
      depends_on:
        - "traefik"
      cap_add:
        - NET_ADMIN
      volumes:
        - ${data_folder}:/data
        - ${torrent_blackhole}:/blackhole
        - ${docker_data_folder}/qbittorrent:/config
        - /etc/localtime:/etc/localtime:ro
      environment:
        <<: *conf
        VPN_ENABLED: "yes"
        VPN_USER: ${openvpn_user}
        VPN_PASS: ${openvpn_password}
        VPN_PROV: custom
        #VPN_OPTIONS: <additional openvpn cli options>
        STRICT_PORT_FORWARD: "no"
        ENABLE_PRIVOXY: "no"
        LAN_NETWORK: 192.168.0.0/24
        # set DNS to docker DNS, this creates a voluntary DNS leak outside of VPN tunnel
        # note that in some setups this might be unsafe (I recommed using DNScrypt on the host to make this safe)
        # but I have not found another way for qbittorrent to resolve the jackett magnet links passed by hydra
        # which point to jackett's docker DNS name
        NAME_SERVERS: 127.0.0.11
        DEBUG: "false"
        WEBUI_PORT: 8080
      labels:
        <<: *securityHeaders
        <<: *oauthLabels
        traefik.enable: "true"
        traefik.backend: "qbittorrent"
        traefik.frontend.rule: "Host:torrent.${root_domain}"
        traefik.docker.network: "proxy"
        traefik.port: "8080"
      networks:
        - proxy
    # jackett tracker site scraper with API
    jackett:
      container_name: jackett
      hostname: jackett.${root_domain}
      image: linuxserver/jackett:latest
      <<: *restart
      depends_on:
        - "traefik"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/jackett:/config
        - ${torrent_blackhole}:/downloads
      environment:
        <<: *conf
      labels:
        <<: *securityHeaders
        <<: *oauthLabels
        traefik.enable: "true"
        traefik.backend: "jackett"
        traefik.frontend.rule: "Host:jackett.${root_domain}"
        traefik.docker.network: "proxy"
        traefik.port: "9117"
      networks:
        - proxy
      security_opt:
        - no-new-privileges
    # jackett tracker site scraper with API
    hydra:
      container_name: hydra
      image: linuxserver/hydra2:latest
      hostname: hydra.${root_domain}
      <<: *restart
      depends_on:
        - "traefik"
        - "jackett"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/hydra:/config
        - ${torrent_blackhole}:/blackhole
      environment:
        <<: *conf
      labels:
        <<: *securityHeaders
        <<: *oauthLabels
        traefik.enable: "true"
        traefik.backend: "hydra"
        traefik.frontend.rule: "Host:hydra.${root_domain}"
        traefik.docker.network: "proxy"
        traefik.port: "5076"
      networks:
        - proxy
      security_opt:
        - no-new-privileges
    # radarr, webapp for downloading movies through torrent client
    # queries are done with jackett
    radarr:
      container_name: radarr
      hostname: movies.${root_domain}
      image: linuxserver/radarr:latest
      <<: *restart
      depends_on:
        - "traefik"
        - "jackett"
        - "qbittorrent"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/radarr:/config
        - ${data_folder}:/data
      environment:
        <<: *conf
      labels:
        <<: *securityHeaders
        <<: *oauthLabels
        traefik.enable: "true"
        traefik.backend: "radarr"
        traefik.frontend.rule: "Host:movies.${root_domain},radarr.${root_domain}"
        traefik.docker.network: "proxy"
        traefik.port: "7878"
      networks:
        - proxy
      security_opt:
        - no-new-privileges
    # sonarr, webapp for downloading series through torrent client
    # queries are done with jackett
    sonarr:
      container_name: sonarr
      hostname: series.${root_domain}
      image: linuxserver/sonarr:preview
      <<: *restart
      depends_on:
        - "traefik"
        - "jackett"
        - "qbittorrent"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/sonarr:/config
        - ${data_folder}:/data
      environment:
        <<: *conf
      labels:
        <<: *securityHeaders
        <<: *oauthLabels
        traefik.enable: "true"
        traefik.backend: "sonarr"
        traefik.frontend.rule: "Host:series.${root_domain},sonarr.${root_domain}"
        traefik.docker.network: "proxy"
        traefik.port: "8989"
      networks:
        - proxy
      security_opt:
        - no-new-privileges
    # lidarr, webapp for downloading music through torrent client
    # queries are done with jackett
    lidarr:
      container_name: lidarr
      hostname: music.${root_domain}
      image: linuxserver/lidarr:latest
      <<: *restart
      depends_on:
        - "traefik"
        - "jackett"
        - "qbittorrent"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/lidarr:/config
        - ${data_folder}:/data
      environment:
        <<: *conf
      labels:
        <<: *securityHeaders
        <<: *oauthLabels
        traefik.enable: "true"
        traefik.backend: "lidarr"
        traefik.frontend.rule: "Host:music.${root_domain},lidarr.${root_domain}"
        traefik.docker.network: "proxy"
        traefik.port: "8686"
      networks:
        - proxy
      security_opt:
        - no-new-privileges
    # mylar, webapp for downloading subtitles
    bazarr:
      container_name: bazarr
      hostname: subtitles.${root_domain}
      image: linuxserver/bazarr:latest
      <<: *restart
      depends_on:
        - "traefik"
        - "radarr"
        - "sonarr"
      environment:
        <<: *conf
      labels:
        <<: *securityHeaders
        <<: *oauthLabels
        traefik.enable: "true"
        traefik.backend: "bazarr"
        traefik.frontend.rule: "Host:subtitles.${root_domain},bazarr.${root_domain}"
        traefik.docker.network: "proxy"
        traefik.port: "6767"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/bazarr:/config
        - ${data_folder}:/data
      networks:
        - proxy
      security_opt:
        - no-new-privileges
    # mylar, webapp for downloading comics through torrent client
    # queries are done with jackett
    mylar:
      container_name: mylar
      hostname: comics.${root_domain}
      image: linuxserver/mylar:latest
      <<: *restart
      depends_on:
        - "traefik"
        - "jackett"
        - "qbittorrent"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/mylar:/config
        - ${data_folder}:/data
      environment:
        <<: *conf
      labels:
        <<: *securityHeaders
        <<: *oauthLabels
        traefik.enable: "true"
        traefik.backend: "mylar"
        traefik.frontend.rule: "Host:comics.${root_domain},mylar.${root_domain}"
        traefik.docker.network: "proxy"
        traefik.port: "8090"
      networks:
        - proxy
      security_opt:
        - no-new-privileges
    # lazylibrarian, webapp for downloading books through torrent client
    # queries are done with jackett
    lazylibrarian:
      container_name: lazylibrarian
      hostname: books.${root_domain}
      image: linuxserver/lazylibrarian:latest
      <<: *restart
      depends_on:
        - "traefik"
        - "jackett"
        - "qbittorrent"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/lazylibrarian:/config
        - ${data_folder}:/data
      environment:
        <<: *conf
      labels:
        <<: *securityHeaders
        <<: *oauthLabels
        traefik.enable: "true"
        traefik.backend: "lazylibrarian"
        traefik.frontend.rule: "Host:books.${root_domain},lazylibrarian.${root_domain}"
        traefik.docker.network: "proxy"
        traefik.port: "5299"
      networks:
        - proxy
      security_opt:
        - no-new-privileges
    # heimdall is a homepage
    heimdall:
      container_name: heimdall
      hostname: home.${root_domain}
      image: linuxserver/heimdall:latest
      <<: *restart
      depends_on:
        - "traefik"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/heimdall:/config
      environment:
        <<: *conf
      labels:
        <<: *securityHeaders
        traefik.enable: "true"
        traefik.backend: "heimdall"
        traefik.frontend.rule: "Host:home.${root_domain}"
        traefik.docker.network: "proxy"
        traefik.port: "80"
      networks:
        - proxy
      security_opt:
        - no-new-privileges
    # plex media server
    plex:
      container_name: plex
      hostname: plex.${root_domain}
      image: linuxserver/plex:latest
      <<: *restart
      # note use the host network mode on first startup,
      # then you can use the regular bridge mode
      # network_mode: "host"
      ports:
        - "32400:32400"
        - "32400:32400/udp"
        - "32469:32469"
        - "32469:32469/udp"
        - "5353:5353/udp"
        - "1900:1900/udp"
      depends_on:
        - "traefik"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/plex:/config
        - ${data_folder}:/data
      environment:
        VERSION: latest
        <<: *conf
      labels:
        <<: *securityHeaders
        traefik.enable: "true"
        traefik.backend: "plex"
        traefik.frontend.rule: "Host:plex.${root_domain}"
        traefik.docker.network: "proxy"
        traefik.port: "32400"
      networks:
        - proxy
      security_opt:
        - no-new-privileges
    # jellyfin media server
    jellyfin:
      container_name: jellyfin
      hostname: jellyfin.${root_domain}
      image: binhex/arch-jellyfin:latest
      <<: *restart
      depends_on:
        - "traefik"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/jellyfin:/config
        - ${data_folder}:/media
      environment:
        <<: *conf
      labels:
        <<: *securityHeaders
        traefik.enable: "true"
        traefik.backend: "jellyfin"
        traefik.frontend.rule: "Host:jellyfin.${root_domain}"
        traefik.docker.network: "proxy"
        traefik.port: "8096"
      networks:
        - proxy
      security_opt:
        - no-new-privileges
    # ombi, plex media requests
    ombi:
      container_name: ombi
      hostname: ombi.${root_domain}
      image: linuxserver/ombi:latest
      <<: *restart
      depends_on:
        - "traefik"
        - "sonarr"
        - "radarr"
        - "lidarr"
        - "plex"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/ombi:/config
      environment:
        <<: *conf
      labels:
        <<: *securityHeaders
        traefik.enable: "true"
        traefik.backend: "ombi"
        traefik.frontend.rule: "Host:ombi.${root_domain}, requests.${root_domain}"
        traefik.docker.network: "proxy"
        traefik.port: "3579"
      networks:
        - proxy
      security_opt:
        - no-new-privileges
    # tautulli, plex media server monitoring
    tautulli:
      container_name: tautulli
      hostname: tautulli.${root_domain}
      image: linuxserver/tautulli:latest
      <<: *restart
      depends_on:
        - "traefik"
        - "plex"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/tautulli:/config
        - ${data_folder}:/data
        - "${docker_data_folder}/plex/Library/Application Support/Plex Media Server/Logs:/logs:ro"
      environment:
        <<: *conf
      labels:
        <<: *securityHeaders
        <<: *oauthLabels
        traefik.enable: "true"
        traefik.backend: "tautulli"
        traefik.frontend.rule: "Host:tautulli.${root_domain},stats.${root_domain}"
        traefik.docker.network: "proxy"
        traefik.port: "8181"
      networks:
        - proxy
      security_opt:
        - no-new-privileges
    # netdata, server monitoring
    netdata:
      container_name: netdata
      hostname: netdata.${root_domain}
      image: netdata/netdata:latest
      <<: *restart
      depends_on:
        - "traefik"
      volumes:
        - /proc:/host/proc:ro
        - /sys:/host/sys:ro
        - /var/run/docker.sock:/var/run/docker.sock:ro
        - ${docker_data_folder}/netdata:/config
      environment:
        <<: *conf
        PGID: ${docker_group_id}
      labels:
        <<: *securityHeaders
        <<: *oauthLabels
        traefik.enable: "true"
        traefik.backend: "netdata"
        traefik.frontend.rule: "Host:status.${root_domain}, netdata.${root_domain}"
        traefik.docker.network: "proxy"
        traefik.port: "19999"
      networks:
        - proxy
      cap_add:
        - SYS_PTRACE
      security_opt:
        - apparmor:unconfined
    # postgresql for mattermost
    mattermost-db:
      container_name: mattermost-db
      environment:
        POSTGRES_PASSWORD: ${mattermost_db_pass}
        POSTGRES_USER: ${mattermost_db_user}
      volumes:
        - mattermost-db-volume:/var/lib/postgresql/data
      networks:
        - mattermost-backend
      security_opt:
        - no-new-privileges
      <<: *restart
      image: postgres:alpine
    # mattermost, self hosted slack alternative
    mattermost:
      container_name: mattermost
      hostname: chat.${root_domain}
      image: mattermost/mattermost-prod-app:latest
      <<: *restart
      depends_on:
        - "traefik"
        - "mattermost-db"
      environment:
        MM_USERNAME: ${mattermost_db_user}
        MM_PASSWORD: ${mattermost_db_pass}
        MM_DBNAME: ${mattermost_db_user}
        DB_HOST: mattermost-db
        DB_PORT_NUMBER: 5432

      labels:
        <<: *securityHeaders
        traefik.enable: "true"
        traefik.backend: "mattermost"
        traefik.frontend.rule: "Host:chat.${root_domain}, mattermost.${root_domain}"
        traefik.docker.network: "mattermost"
        traefik.port: "80"
      networks:
        - mattermost
        - mattermost-backend
      security_opt:
        - no-new-privileges
    # mariadb for bookstack
    bookstack-db:
      container_name: bookstack-db
      environment:
        MYSQL_ROOT_PASSWORD: ${bookstack_root_db_pass}
        MYSQL_PASSWORD: ${bookstack_db_pass}
        MYSQL_USER: ${bookstack_db_user}
        MYSQL_DATABASE: bookstack-db
      volumes:
        - bookstack-db-volume:/var/lib/mysql
      networks:
        - bookstack-backend
      security_opt:
        - no-new-privileges
      <<: *restart
      image: mariadb:latest
    # bookstack for hosting documentation
    bookstack:
      container_name: bookstack
      hostname: doc.${root_domain}
      image: linuxserver/bookstack:latest
      <<: *restart
      depends_on:
        - "traefik"
        - "bookstack-db"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/bookstack:/config
      environment:
        <<: *conf
        DB_HOST: bookstack-db
        DB_USER: ${bookstack_db_user}
        DB_PASS: ${bookstack_db_pass}
        DB_DATABASE: bookstack-db
        APP_URL: https://doc.${root_domain}/
      labels:
        <<: *securityHeaders
        traefik.enable: "true"
        traefik.backend: "bookstack"
        traefik.frontend.rule: "Host:doc.${root_domain},bookstack.${root_domain}"
        traefik.docker.network: "bookstack"
        traefik.port: "80"
      networks:
        - bookstack
        - bookstack-backend
      security_opt:
        - no-new-privileges

volumes:
  mattermost-db-volume:
  bookstack-db-volume:

networks:
  <<: *proxiednetworks
  proxy:
    external: true
  mattermost-backend:
    internal: true
  watchtower:
  bookstack-backend:
    internal: true
