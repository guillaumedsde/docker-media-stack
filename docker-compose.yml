# THE MEDIA STACK #

# this docker-compose file will get a selection of media downloading/management webapps
# I've tried to simplify getting started as much as possible
#   1. configure your desired variables in the .env file
#   2. run `docker-compose up -d` from the folder with this docker-copose.yml folder

# NOTE this process is not fully automated and individual configuration of webapps is still required after docker compose
version: "3.4"

x-https: &https
  VIRTUAL_PROTO: http
  HTTPS_METHOD: redirect
  LETSENCRYPT_EMAIL: ${letsencrypt_email}
  SSL_POLICY: Mozilla-Modern

x-restart: &restart
  restart: on-failure:5

services:
    # nginx reverse proxy container
    # binds to HTTP (80) and HTTPS (443) ports
    # then serves requests as a reverse proxy to the different containers defined below
    nginx-proxy:
      image: jwilder/nginx-proxy:alpine
      <<: *restart
      ports:
        - 80:80
        - 443:443
      volumes:
        # HTTPS certificates
        - ${docker_data_folder}/nginx-proxy/certificates:/etc/nginx/certs:ro
        - nginx-vhosts:/etc/nginx/vhost.d
        - nginx-html:/usr/share/nginx/html
        # additional nginx configuration
        - ${docker_data_folder}/nginx-proxy/my_proxy.conf:/etc/nginx/conf.d/my_proxy.conf:ro
        - ${docker_data_folder}/nginx-proxy/.htpasswd:/.htpasswd:ro
        - /var/run/docker.sock:/tmp/docker.sock:ro
      labels:
        - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy
      networks:
        - frontend
      security_opt:
        - no-new-privileges
    # letsencrypt container for HTTPS certificate generation
    nginx-letsencrypt:
      image: jrcs/letsencrypt-nginx-proxy-companion:latest
      <<: *restart
      depends_on:
        - "nginx-proxy"
      volumes:
        - ${docker_data_folder}/nginx-proxy/certificates:/etc/nginx/certs:rw
        - nginx-vhosts:/etc/nginx/vhost.d
        - nginx-html:/usr/share/nginx/html
        - /var/run/docker.sock:/var/run/docker.sock:ro
      environment:
        - DHPARAM_BITS=4096
      networks:
        - frontend
      security_opt:
        - no-new-privileges
    # watchtower container to update images
    # NOTE to update the containers images' watchtower needs to restart the containers this implies some downtime when it does
    # NOTE watchtower also updates itself
    watchtower:
      image: v2tec/watchtower:latest
      <<: *restart
      read_only: true
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      environment:
        - WATCHTOWER_NOTIFICATIONS=slack
        - WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=${slack_webhook_url}
        - WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER="watchtower_${root_domain}
      networks:
        - watchtower
      security_opt:
        - no-new-privileges
      command: --cleanup
    # deluge torrent client container
    deluge:
      image: binhex/arch-delugevpn:latest
      <<: *restart
      depends_on:
        - "nginx-proxy"
        - "nginx-letsencrypt"
      cap_add:
        - NET_ADMIN
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/deluge:/config
        - ${data_folder}:/data
        - ${torrent_blackhole}:/blackhole
      #devices:
      #    - /dev/net/tun
      environment:
        <<: *https
        PGID: ${GID}
        PUID: ${UID}
        #UMASK: 007
        VPN_ENABLED: "yes"
        VPN_USER: ${openvpn_user}
        VPN_PASS: ${openvpn_password}
        VPN_PROV: custom
        #VPN_OPTIONS: <additional openvpn cli options>
        STRICT_PORT_FORWARD: "no"
        ENABLE_PRIVOXY: "no"
        LAN_NETWORK: 192.168.0.0/24
        NAME_SERVERS: 1.1.1.1,1.0.0.1
        DEBUG: "false"
        VIRTUAL_HOST: torrent.${root_domain}
        VIRTUAL_PORT: 8112
        LETSENCRYPT_HOST: torrent.${root_domain}
      networks:
        - frontend
      security_opt:
        - no-new-privileges
    # jackett tracker site scraper with API
    jackett:
      image: linuxserver/jackett:latest
      <<: *restart
      depends_on:
        - "nginx-proxy"
        - "nginx-letsencrypt"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/jackett:/config
        - ${torrent_blackhole}:/downloads
      environment:
        <<: *https
        PGID: ${GID}
        PUID: ${UID}
        VIRTUAL_HOST: jackett.${root_domain}
        VIRTUAL_PORT: 9117
        LETSENCRYPT_HOST: jackett.${root_domain}
      networks:
        - frontend
      security_opt:
        - no-new-privileges
    # jackett tracker site scraper with API
    hydra:
      image: linuxserver/hydra2:latest
      <<: *restart
      depends_on:
        - "nginx-proxy"
        - "nginx-letsencrypt"
        - "jackett"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/hydra:/config
        - ${data_folder}/downloads:/downloads
      environment:
        <<: *https
        PGID: ${GID}
        PUID: ${UID}
        VIRTUAL_HOST: hydra.${root_domain}
        VIRTUAL_PORT: 5076
        LETSENCRYPT_HOST: hydra.${root_domain}
      networks:
        - frontend
      security_opt:
        - no-new-privileges
    # radarr, webapp for downloading movies through torrent client
    # queries are done with jackett
    radarr:
      image: linuxserver/radarr:latest
      <<: *restart
      depends_on:
        - "nginx-proxy"
        - "nginx-letsencrypt"
        - "jackett"
        - "deluge"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/radarr:/config
        - ${data_folder}:/data
      environment:
        <<: *https
        PGID: ${GID}
        PUID: ${UID}
        VIRTUAL_HOST: radarr.${root_domain},movies.${root_domain}
        VIRTUAL_PORT: 7878
        LETSENCRYPT_HOST: radarr.${root_domain},movies.${root_domain}
      networks:
        - frontend
      security_opt:
        - no-new-privileges
    # sonarr, webapp for downloading series through torrent client
    # queries are done with jackett
    sonarr:
      image: linuxserver/sonarr:latest
      <<: *restart
      depends_on:
        - "nginx-proxy"
        - "nginx-letsencrypt"
        - "jackett"
        - "deluge"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/sonarr:/config
        - ${data_folder}:/data
      environment:
        <<: *https
        PGID: ${GID}
        PUID: ${UID}
        VIRTUAL_HOST: sonarr.${root_domain},series.${root_domain}
        VIRTUAL_PORT: 8989
        LETSENCRYPT_HOST: sonarr.${root_domain},series.${root_domain}
      networks:
        - frontend
      security_opt:
        - no-new-privileges
    # lidarr, webapp for downloading music through torrent client
    # queries are done with jackett
    lidarr:
      image: linuxserver/lidarr:latest
      <<: *restart
      depends_on:
        - "nginx-proxy"
        - "nginx-letsencrypt"
        - "jackett"
        - "deluge"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/lidarr:/config
        - ${data_folder}:/music
      environment:
        <<: *https
        PGID: ${GID}
        PUID: ${UID}
        VIRTUAL_HOST: lidarr.${root_domain},music.${root_domain}
        VIRTUAL_PORT: 8686
        LETSENCRYPT_HOST: lidarr.${root_domain},music.${root_domain}
      networks:
        - frontend
      security_opt:
        - no-new-privileges
    # mylar, webapp for downloading comics through torrent client
    # queries are done with jackett
    mylar:
      image: linuxserver/mylar:latest
      <<: *restart
      depends_on:
        - "nginx-proxy"
        - "nginx-letsencrypt"
        - "jackett"
        - "deluge"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/mylar:/config
        - ${data_folder}:/data
      environment:
        <<: *https
        PGID: ${GID}
        PUID: ${UID}
        VIRTUAL_HOST: mylar.${root_domain},comics.${root_domain}
        VIRTUAL_PORT: 8090
        LETSENCRYPT_HOST: mylar.${root_domain},comics.${root_domain}
      networks:
        - frontend
      security_opt:
        - no-new-privileges
    # plex
    plex:
      image: linuxserver/plex:latest
      <<: *restart
      network_mode: "host"
      # ports:
      #   - "32400:32400"
      #   - "32400:32400/udp"
      #   - "32469:32469"
      #   - "32469:32469/udp"
      #   - "5353:5353/udp"
      #   - "1900:1900/udp"
      depends_on:
        - "nginx-proxy"
        - "nginx-letsencrypt"
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${docker_data_folder}/plex:/config
        - ${data_folder}:/data
      environment:
        <<: *https
        VERSION: latest
        PGID: ${GID}
        PUID: ${UID}
        VIRTUAL_HOST: plex.${root_domain}
        VIRTUAL_PORT: 32400
        LETSENCRYPT_HOST: plex.${root_domain}
      # networks:
      #   - frontend
      security_opt:
        - no-new-privileges
    # postgresql for mattermost
    mattermost-db:
      environment:
        POSTGRES_PASSWORD: ${mattermost_db_pass}
        POSTGRES_USER: ${mattermost_db_user}
      volumes:
        - mattermost-db-volume:/var/lib/postgresql/data
      networks:
        - mattermost
      security_opt:
        - no-new-privileges
      <<: *restart
      image: postgres:alpine
    # mattermost, self hosted slack alternative
    mattermost:
      image: mattermost/mattermost-prod-app:latest
      <<: *restart
      depends_on:
        - "nginx-proxy"
        - "nginx-letsencrypt"
        - "mattermost-db"
      environment:
        <<: *https
        MM_USERNAME: ${mattermost_db_user}
        MM_PASSWORD: ${mattermost_db_pass}
        MM_DBNAME: ${mattermost_db_user}
        DB_HOST: mattermost-db
        DB_PORT_NUMBER: 5432
        VIRTUAL_HOST: chat.${root_domain},mattermost.${root_domain}
        VIRTUAL_PORT: 80
        LETSENCRYPT_HOST: chat.${root_domain},mattermost.${root_domain}
      networks:
        - frontend
        - mattermost
      security_opt:
        - no-new-privileges

volumes:
  nginx-vhosts:
  nginx-html:
  mattermost-db-volume:

networks:
  frontend:
  watchtower:
  mattermost:
    internal: true
