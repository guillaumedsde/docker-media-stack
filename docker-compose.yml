# THE MEDIA STACK #
# this docker-compose file will get a selection of media downloading/management webapps
# I've tried to simplify getting started as much as possible
#   1. configure your desired variables in the .env file
#   2. run `docker-compose up -d` from the folder with this docker-copose.yml folder
# NOTE this process is not fully automated and individual configuration of webapps is still required after docker compose
version: "2.4"

# basic common configuration for most containers
x-conf: &conf
  TZ: ${TZ}
  PGID: ${GID}
  PUID: ${UID}

# container restart policy
x-restart: &restart
  restart: always

# container logging policy
x-logging: &logging
  logging:
    driver: "json-file"
    options:
      max-file: "5"
      max-size: "10m"

# Traefik
x-traefik: &traefik
  traefik.enable: "true"

services:
  # reverse proxy
  traefik:
    image: traefik:v2.5
    user: ${UID}:${docker_group_id}
    cap_add:
      - NET_BIND_SERVICE
    command:
      - "--log.level=INFO"
      # docker configuration
      - "--providers.docker.network=traefik"
      - "--providers.docker.exposedbydefault=false"
      # entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls.certResolver=le"
      - "--entrypoints.websecure.http.middlewares=securityHeaders@file"
      # DNS challenge
      - "--certificatesresolvers.le=true"
      - "--certificatesresolvers.le.acme.storage=/traefik/acme.json"
      - "--certificatesresolvers.le.acme.dnschallenge=true"
      - "--certificatesresolvers.le.acme.dnschallenge.delayBeforeCheck=240"
      - "--certificatesresolvers.le.acme.dnschallenge.provider=ovh"
      - "--certificatesresolvers.le.acme.email=${letsencrypt_email}"
      - "--certificatesresolvers.le.acme.keytype=EC384"
      - "--certificatesresolvers.le.acme.dnsChallenge.resolvers=1.1.1.1:53"
      # configs
      - "--providers.file.directory=/config/"
      # traefik API and dashboard
      - "--api=true"
      - "--api.dashboard=true"
      # traefik healthcheck
      - "--ping=true"
      - "--ping.manualrouting=true"
      # traefik access logs
      - "--accesslog=false"
    environment:
      OVH_ENDPOINT: ${OVH_ENDPOINT}
      OVH_APPLICATION_KEY: ${OVH_APPLICATION_KEY}
      OVH_APPLICATION_SECRET: ${OVH_APPLICATION_SECRET}
      OVH_CONSUMER_KEY: ${OVH_CONSUMER_KEY}
    labels:
      <<: *traefik
      traefik.http.routers.dashboard.rule: Host(`traefik.${root_domain}`)
      traefik.http.routers.dashboard.service: api@internal
      traefik.http.routers.dashboard.middlewares: traefik-forward-auth
      traefik.http.routers.ping.rule: Host(`ping.${root_domain}`)
      traefik.http.routers.ping.service: ping@internal
    read_only: true
    volumes:
      - ${docker_data_folder}/traefik/logs:/var/log/traefik/
      - ${docker_data_folder}/traefik:/traefik
      - ./config/traefik:/config:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    tmpfs:
      - "/tmp"
    networks:
      - traefik
      - calibre-web
      - homer
      - gollum
      - ghost
      - nextcloud-proxy
      - gotify
      - robots
      - netdata
      - lam
      - authelia-proxy
    <<: *restart
    <<: *logging
    mem_limit: 200m
    cpus: "4"
    ports:
      - 80:80
      - 443:443

  # watchtower container to update images
  # NOTE to update the containers images' watchtower needs to restart the containers this implies some downtime when it does
  # NOTE watchtower also updates itself
  watchtower:
    image: containrrr/watchtower:latest
    <<: *restart
    <<: *logging
    mem_limit: 100m
    cpus: "1"
    read_only: true
    user: ${UID}:${docker_group_id}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      WATCHTOWER_NOTIFICATIONS: "gotify"
      WATCHTOWER_NOTIFICATION_GOTIFY_URL: "${WATCHTOWER_NOTIFICATION_GOTIFY_URL}"
      WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN: "${WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN}"
    networks:
      - watchtower
    command:
      - "--cleanup"
      - "--schedule"
      - "0 0 5 * * *"

# Wireguard VPN client
  wireguard:
    <<: *restart
    <<: *logging
    image: jordanpotter/wireguard:2.1.3
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    dns:
      - 1.1.1.1
      - 1.0.0.1
    cpus: 2.0
    mem_limit: 100m
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      traefik:
        aliases:
          - jackett
          - flaresolverr
          - qbittorrent
    volumes:
      - ${docker_data_folder}/wireguard/wg0.conf:/etc/wireguard/wg0.conf:ro
    labels:
      <<: *traefik
      # Jackett
      # service
      traefik.http.services.jackett.loadbalancer.server.port: "9117"
      # Router
      traefik.http.routers.jackett.rule: Host(`jackett.${root_domain}`)
      traefik.http.routers.jackett.service: jackett
      # Forward auth
      traefik.http.routers.jackett.middlewares: authelia@docker
      # qBittorrent
      # service
      traefik.http.services.qbittorrent.loadbalancer.server.port: "8080"
      # router
      traefik.http.routers.qbittorrent.rule: Host(`torrent.${root_domain}`)
      traefik.http.routers.qbittorrent.service: qbittorrent
      # Forward auth
      traefik.http.routers.qbittorrent.middlewares: authelia@docker
      # Disable watchtower for this container because of these issues
      # https://github.com/containrrr/watchtower/issues/188
      # https://github.com/containrrr/watchtower/issues/1013
      com.centurylinklabs.watchtower.enable: "false"

  # Torrent client
  qbittorrent:
    <<: *restart
    <<: *logging
    depends_on:
      - wireguard
    volumes:
      - ${docker_data_folder}/qbittorrent:/config
      - ${data_folder}:/data
      - torrent-blackhole:/blackhole
      - /etc/localtime:/etc/localtime:ro
    tmpfs:
      - /tmp
    read_only: true
    cpus: 2.0
    mem_limit: 2g
    user: ${UID}:${GID}
    network_mode: service:wireguard
    image: guillaumedsde/qbittorrent-distroless:latest
    labels:
      com.centurylinklabs.watchtower.depends-on: wireguard
    healthcheck:
      disable: true

  flood:
    <<: *restart
    <<: *logging
    image: jesec/flood:master-distroless
    hostname: flood.${root_domain}
    cpus: "2"
    mem_limit: 250M
    read_only: true
    user: ${UID}:${GID}
    volumes:
      - ${docker_data_folder}/flood:/config
      - ${data_folder}:/data:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - traefik
    command:
      - --auth=none
      - --qburl=http://qbittorrent:8080
      - --qbuser=${QBT_USER}
      - --qbpass=${QBT_PASS}
      - --rundir=/config
    labels:
      <<: *traefik
      traefik.http.routers.flood.rule: Host(`flood.${root_domain}`)
      # service
      traefik.http.services.flood.loadbalancer.server.port: "3000"
      # Forward auth
      traefik.http.routers.flood.middlewares: authelia@docker

  # jackett tracker site scraper with API
  jackett:
    image: guillaumedsde/jackett-distroless:latest
    <<: *restart
    <<: *logging
    depends_on:
      - wireguard
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/jackett:/config
      - torrent-blackhole:/blackhole
    tmpfs:
      - "/var:rw,exec"
      - "/tmp:rw,exec"
    read_only: true
    cpus: "4"
    mem_limit: 1g
    user: ${UID}:${GID}
    network_mode: service:wireguard
    environment:
      <<: *conf
    labels:
      com.centurylinklabs.watchtower.depends-on: wireguard

  # Sync Jackett Indexers with Radarr, Sonarr and Lidarr
  jackett-sync-ts:
    image: allergicduck/jackett-sync
    <<: *restart
    <<: *logging
    depends_on:
      jackett:
        condition: service_healthy
      radarr:
        condition: service_started
      sonarr:
        condition: service_started
      lidarr:
        condition: service_started
    user: ${UID}:${GID}
    read_only: true
    cpus: "1"
    mem_limit: 100m
    networks:
      - traefik
    environment:
      LIDARR_URL: "http://lidarr:8686"
      LIDARR_KEY: ${LIDARR_API_KEY}
      RADARR_URL: "http://radarr:7878"
      RADARR_KEY: ${RADARR_API_KEY}
      SONARR_URL: "http://sonarr:8989"
      SONARR_KEY: ${SONARR_API_KEY}
      JACKETT_URL: "http://jackett:9117"
      JACKETT_KEY: ${JACKETT_API_KEY}

  # radarr, webapp for downloading movies through torrent client
  # queries are done with jackett
  radarr:
    hostname: movies.${root_domain}
    image: ghcr.io/linuxserver/radarr:nightly
    <<: *restart
    <<: *logging
    cpus: "4"
    mem_limit: 2G
    depends_on:
      jackett:
        condition: service_healthy
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/radarr:/config
      - ${data_folder}:/data
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *traefik
      traefik.http.routers.radarr.rule: Host(`movies.${root_domain}`)
      # service
      traefik.http.services.radarr.loadbalancer.server.port: "7878"
      # Forward auth
      traefik.http.routers.radarr.middlewares: authelia@docker

  # sonarr, webapp for downloading series through torrent client
  # queries are done with jackett
  sonarr:
    hostname: series.${root_domain}
    image: ghcr.io/linuxserver/sonarr:latest
    <<: *restart
    <<: *logging
    cpus: "4"
    mem_limit: 2G
    depends_on:
      jackett:
        condition: service_healthy
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/sonarr:/config
      - ${data_folder}:/data
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *traefik
      traefik.http.routers.sonarr.rule: Host(`series.${root_domain}`)
      # service
      traefik.http.services.sonarr.loadbalancer.server.port: "8989"
      # Forward auth
      traefik.http.routers.sonarr.middlewares: authelia@docker

  # lidarr, webapp for downloading music through torrent client
  # queries are done with jackett
  lidarr:
    hostname: music.${root_domain}
    image: ghcr.io/linuxserver/lidarr:latest
    <<: *restart
    <<: *logging
    cpus: "4"
    mem_limit: 1G
    depends_on:
      jackett:
        condition: service_healthy
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/lidarr:/config
      - ${data_folder}:/data
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *traefik
      traefik.http.routers.lidarr.rule: Host(`music.${root_domain}`)
      # service
      traefik.http.services.lidarr.loadbalancer.server.port: "8686"
      # Forward auth
      traefik.http.routers.lidarr.middlewares: authelia@docker

  # bazarr, webapp for downloading subtitles
  bazarr:
    hostname: subtitles.${root_domain}
    image: hotio/bazarr:release
    <<: *restart
    <<: *logging
    depends_on:
      - "radarr"
      - "sonarr"
    environment:
      <<: *conf
    labels:
      <<: *traefik
      traefik.http.routers.bazarr.rule: Host(`subtitles.${root_domain}`)
      # service
      traefik.http.services.bazarr.loadbalancer.server.port: "6767"
      # Forward auth
      traefik.http.routers.bazarr.middlewares: authelia@docker
    cpus: "2"
    mem_limit: 300M
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/bazarr:/config
      - ${data_folder}:/data
      - ./config/bazarr/sub-clean.sh:/usr/bin/sub-clean.sh
      - ./config/bazarr/chmod-custom-script.sh:/etc/cont-init.d/99-chmod-custom-script
    networks:
      - traefik

  # lazylibrarian, webapp for downloading books through torrent client
  # queries are done with jackett
  lazylibrarian:
    hostname: books.${root_domain}
    image: ghcr.io/linuxserver/lazylibrarian:latest
    <<: *restart
    <<: *logging
    mem_limit: 500M
    cpus: "2"
    depends_on:
      jackett:
        condition: service_healthy
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/lazylibrarian:/config
      - ${data_folder}:/data
      - torrent-blackhole:/blackhole
    networks:
      - traefik
    environment:
      <<: *conf
      DOCKER_MODS: linuxserver/calibre-web:calibre
    labels:
      <<: *traefik
      traefik.http.routers.lazylibrarian.rule: Host(`books.${root_domain}`)
      # service
      traefik.http.services.lazylibrarian.loadbalancer.server.port: "5299"
      # Forward auth
      traefik.http.routers.lazylibrarian.middlewares: authelia@docker

  # automatically extract torrented archives
  unpackerr:
    image: golift/unpackerr
    user: ${UID}:${GID}
    read_only: true
    cpus: "4"
    mem_limit: 100m
    <<: *restart
    <<: *logging
    networks:
      - traefik
    volumes:
      - ${data_folder}:/data
    environment:
      UN_SONARR_0_URL: http://sonarr:8989
      UN_SONARR_0_API_KEY: ${SONARR_API_KEY}
      UN_SONARR_0_PATH: /data/download/series
      UN_RADARR_0_URL: http://radarr:7878
      UN_RADARR_0_API_KEY: ${RADARR_API_KEY}
      UN_RADARR_0_PATH: /data/download/series
      UN_LIDARR_0_URL: http://lidarr:8686
      UN_LIDARR_0_API_KEY: ${LIDARR_API_KEY}
      UN_LIDARR_0_PATH: /data/download/music

  # homer is a homepage container
  homer:
    hostname: ${root_domain}
    image: b4bz/homer:latest
    cpus: "1"
    mem_limit: 100m
    read_only: true
    <<: *restart
    <<: *logging
    environment:
      UID: ${UID}
      GID: ${GID}
    networks:
      - homer
    volumes:
      - ${docker_data_folder}/homer/config.yml:/www/assets/config.yml:ro
      - ${docker_data_folder}/homer/assets:/www/assets
    labels:
      <<: *traefik
      traefik.docker.network: homer
      traefik.http.routers.homer.rule: Host(`home.${root_domain}`, `${root_domain}`)
      # service
      traefik.http.services.homer.loadbalancer.server.port: "8080"

  # jellyfin media server
  jellyfin:
    hostname: jellyfin.${root_domain}
    image: jellyfin/jellyfin:10.7.7
    user: ${UID}:${GID}
    cpus: "16"
    mem_limit: 4g
    <<: *restart
    <<: *logging
    depends_on:
      - openldap
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/jellyfin:/config
      - ${data_folder}:/data:ro
    networks:
      - traefik
      - ldap
    environment:
      <<: *conf
      JELLYFIN_PublishedServerUrl: https://jellyfin.${root_domain}
      #Uncomment forofficial Jellyfin image:
      JELLYFIN_DATA_DIR: /config/data
      JELLYFIN_CONFIG_DIR: /config
      JELLYFIN_LOG_DIR: /config/log
      JELLYFIN_CACHE_DIR: /config/cache
    labels:
      <<: *traefik
      traefik.http.routers.jellyfin.rule: Host(`jellyfin.${root_domain}`,`jellyfin.${old_root_domain}`)
      # service
      traefik.http.services.jellyfin.loadbalancer.server.port: "8096"

  # ombi, plex media requests
  ombi:
    hostname: ombi.${root_domain}
    image: ghcr.io/linuxserver/ombi:latest
    <<: *restart
    <<: *logging
    mem_limit: 500m
    cpus: "2"
    depends_on:
      - "sonarr"
      - "radarr"
      - "lidarr"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/ombi:/config
    networks:
      - traefik
    environment:
      <<: *conf
    labels:
      <<: *traefik
      traefik.http.routers.ombi.rule: Host(`ombi.${root_domain}`)
      # service
      traefik.http.services.ombi.loadbalancer.server.port: "3579"

  # calibre-web, for reading ebooks
  calibre-web:
    hostname: read.${root_domain}
    image: ghcr.io/linuxserver/calibre-web:latest
    cpus: "4"
    mem_limit: 300M
    <<: *restart
    <<: *logging
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/calibre-web:/config
      - ${data_folder}/books:/books
    networks:
      - calibre-web
      - ldap
    environment:
      <<: *conf
      DOCKER_MODS: linuxserver/calibre-web:calibre
    labels:
      <<: *traefik
      traefik.docker.network: calibre-web
      traefik.http.routers.calibre-web.rule: Host(`read.${root_domain}`)
      # service
      traefik.http.services.calibre-web.loadbalancer.server.port: "8083"
      # Forward auth
      traefik.http.routers.calibre-web.middlewares: authelia@docker

  # gollum for hosting documentation
  gollum:
    hostname: docs.${root_domain}
    image: cuotos/gollum-alpine:latest
    <<: *restart
    <<: *logging
    cpus: "2"
    mem_limit: 250m
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/gollum:/wiki
    networks:
      - gollum
    environment:
      <<: *conf
      GOLLUMARGS: "--allow-uploads dir"
    labels:
      <<: *traefik
      traefik.docker.network: gollum
      traefik.http.routers.gollum.rule: Host(`docs.${root_domain}`)
      # service
      traefik.http.services.gollum.loadbalancer.server.port: "4567"
      # Forward auth
      traefik.http.routers.gollum.middlewares: authelia@docker

  # JS CMS
  ghost_guillaume:
    environment:
      <<: *conf
      url: "https://blog.guillaume.${secondary_tld}"
      mail__transport: SMTP
      mail__from: ghost@${root_domain}
      mail__options__service: SendGrid
      mail__options__host: smtp.sendgrid.net
      mail__options__port: "465"
      mail__options__secureConnection: "true"
      mail__options__auth__user: apikey
      mail__options__auth__pass: ${SENDGRID_PASS}
    labels:
      <<: *traefik
      traefik.docker.network: ghost
      traefik.http.routers.blog-guillaume.rule: Host(`blog.guillaume.${secondary_tld}`)
      # service
      traefik.http.services.blog-guillaume.loadbalancer.server.port: "2368"
    volumes:
      - ${docker_data_folder}/ghost_guillaume:/var/lib/ghost/content
      - /etc/localtime:/etc/localtime:ro
    networks:
      - ghost
    <<: *restart
    <<: *logging
    mem_limit: 250m
    cpus: "2"
    image: ghost:alpine

  # personal cloud
  nextcloud:
    hostname: cloud.${root_domain}
    depends_on:
      - nextcloud-postgres
      - nextcloud-redis
      - samba
      - openldap
    volumes:
      - ${docker_data_folder}/nextcloud:/var/www/html
      - ${data_folder}:/data
    networks:
      - traefik
      - nextcloud
      - nextcloud-proxy
      - ldap
      - samba
    environment:
      <<: *conf
      POSTGRES_DB: nextcloud
      POSTGRES_USER: nextcloud
      POSTGRES_PASSWORD: ${nextcloud_db_pass}
      POSTGRES_HOST: nextcloud-postgres
      REDIS_HOST: nextcloud-redis
      REDIS_HOST_PASSWORD: ${NEXTCLOUD_REDIS_PASS}
      SMTP_HOST: smtp.sendgrid.net
      SMTP_SECURE: ssl
      SMTP_PORT: "465"
      SMTP_AUTHTYPE: login
      SMTP_NAME: apikey
      SMTP_PASSWORD: ${SENDGRID_PASS}
      MAIL_FROM_ADDRESS: nextcloud
      MAIL_DOMAIN: ${root_domain}
    labels:
      <<: *traefik
      traefik.docker.network: nextcloud-proxy
      traefik.http.routers.nextcloud.rule: Host(`cloud.${root_domain}`)
      traefik.http.routers.nextcloud.middlewares: nextcloud-redirectregex
      # service
      traefik.http.services.nextcloud.loadbalancer.server.port: "80"
      traefik.http.middlewares.nextcloud-redirectregex.redirectregex.permanent: "true"
      traefik.http.middlewares.nextcloud-redirectregex.redirectregex.regex: https://cloud.${root_domain}/.well-known/(card|cal)dav
      traefik.http.middlewares.nextcloud-redirectregex.redirectregex.replacement: https://cloud.${root_domain}/remote.php/dav/
    <<: *restart
    <<: *logging
    mem_limit: 1g
    cpus: "8"
    image: guillaumedsde/nextcloud-samba:23-apache

  # databse for nextcloud
  nextcloud-postgres:
    cpus: "2"
    mem_limit: 250m
    environment:
      POSTGRES_PASSWORD: ${nextcloud_db_pass}
      POSTGRES_USER: nextcloud
    volumes:
      - ${docker_data_folder}/nextcloud-postgres:/var/lib/postgresql/data
    networks:
      - nextcloud
    <<: *restart
    <<: *logging
    image: postgres:12-alpine

  # cache for nextcloud
  nextcloud-redis:
    cpus: "2"
    mem_limit: 200m
    networks:
      - nextcloud
    <<: *restart
    <<: *logging
    command: redis-server --requirepass ${NEXTCLOUD_REDIS_PASS}
    image: redis:alpine

  samba:
    environment:
      SAMBA_LDAP_PASSWORD: ${LDAP_ADMIN_PASSWORD}
      SID: ${SID}
    ports:
      - "139:139"
      - "445:445"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/samba/nslcd.conf:/etc/nslcd.conf:ro
      - ${docker_data_folder}/samba/smb.conf:/etc/samba/smb.conf:ro
      - ${docker_data_folder}/samba/secrets.tdb:/var/lib/samba/private/secrets.tdb
      - /data/users:/data/users
    depends_on:
      - openldap
    <<: *restart
    <<: *logging
    mem_limit: 250m
    cpus: "2"
    networks:
      - samba
      - ldap
    image: guillaumedsde/samba-ldap

  ssh:
    ports:
      - "1998:2222"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${docker_data_folder}/samba/nslcd.conf:/etc/nslcd.conf:ro
      - ${docker_data_folder}/ssh/sshd_config:/etc/ssh/sshd_config:ro
      - ${docker_data_folder}/ssh/config:/config
      - /data/users:/data/users
    read_only: true
    tmpfs:
      - /run/sshd
      - /var:rw,exec
    environment:
      S6_READ_ONLY_ROOT: "1"
    depends_on:
      - openldap
    <<: *restart
    <<: *logging
    mem_limit: 100m
    cpus: "2"
    networks:
      - ssh
      - ldap
    image: guillaumedsde/ssh-ldap

  # Web Service Discovery host daemon
  # see https://github.com/christgau/wsdd
  wsdd:
    network_mode: host
    user: ${UID}:${GID}
    read_only: true
    mem_limit: 100M
    cpus: "1"
    <<: *restart
    <<: *logging
    command: --ipv4only --verbose --hostname ${WSDD_HOSTNAME} --interface ${WSDD_INTERFACE}
    image: guillaumedsde/wsdd:latest

  # Push notification service
  gotify:
    hostname: gotify.${root_domain}
    mem_limit: 100M
    cpus: "2"
    environment:
      <<: *conf
    <<: *restart
    <<: *logging
    labels:
      <<: *traefik
      traefik.docker.network: gotify
      traefik.http.routers.gotify.rule: Host(`gotify.${root_domain}`)
      # service
      traefik.http.services.gotify.loadbalancer.server.port: "80"
    volumes:
      - ${docker_data_folder}/gotify:/app/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - gotify
    image: gotify/server:latest

  robots:
    image: nginx:alpine
    read_only: true
    mem_limit: 50M
    cpus: "1"
    volumes:
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./config/nginx/robots.txt:/usr/share/nginx/html/robots.txt:ro
      - robots-nginx-cache:/var/cache/nginx
      - robots-nginx-pid:/var/run
      - robots-nginx-conf:/etc/nginx/conf.d/
    networks:
      - robots
    labels:
      <<: *traefik
      traefik.docker.network: robots
      traefik.http.routers.robots.rule: HostRegexp(`${root_domain}`,`{subhost:[a-z]+}.${root_domain}`) && Path(`/robots.txt`)
      # service
      traefik.http.services.robots.loadbalancer.server.port: "8080"

  ##################################################################
  # Monitoring

  # netdata, server monitoring
  netdata:
    hostname: status.${root_domain}
    image: netdata/netdata:latest
    <<: *restart
    <<: *logging
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${docker_data_folder}/netdata/health_alarm_notify.conf:/etc/netdata/health_alarm_notify.conf
    networks:
      - netdata
    environment:
      <<: *conf
      PGID: ${docker_group_id}
    labels:
      <<: *traefik
      traefik.docker.network: netdata
      traefik.http.routers.netdata.rule: Host(`status.${root_domain}`)
      # service
      traefik.http.services.netdata.loadbalancer.server.port: "19999"
      # Forward auth
      traefik.http.routers.netdata.middlewares: authelia@docker
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    mem_limit: 500m
    cpus: "2"

  ##################################################################
  # Authentication

  # LDAP server
  openldap:
    hostname: ldap.${old_root_domain}
    image: osixia/openldap:1.5.0
    mem_limit: 500m
    environment:
      HOSTNAME: ldap.${old_root_domain}
      LDAP_DOMAIN: ${old_root_domain}
      LDAP_ORGANISATION: ${LDAP_ORGANISATION}
      LDAP_ADMIN_PASSWORD: ${LDAP_ADMIN_PASSWORD}
      LDAP_TLS: "true"
      LDAP_TLS_CRT_FILENAME: ldap.${old_root_domain}.cer
      LDAP_TLS_KEY_FILENAME: ldap.${old_root_domain}.key
      LDAP_TLS_CA_CRT_FILENAME: ca.cer
      LDAP_OPENLDAP_UID: ${UID}
      LDAP_OPENLDAP_GID: ${GID}
    command: "--copy-service --loglevel debug"
    <<: *restart
    <<: *logging
    networks:
      - ldap
    ports:
      - 389:389
      - 636:636
    volumes:
      - ${docker_data_folder}/openldap/ldap:/var/lib/ldap
      - ${docker_data_folder}/openldap/slapd.d:/etc/ldap/slapd.d
      # ubuntu path for Samba LDIF, this might be different with other distributions
      - ./ldap_templates/samba/ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom/samba.ldif:ro
      # gotten from https://ubuntu.com/server/docs/samba-openldap-backend
      - ./ldap_templates/samba_indices.ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom/samba_indices.ldif:ro
      - ./ldap_templates/memberof.ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom/memberof.ldif:ro
      # certificates
      - ${docker_data_folder}/openldap/certs/ldap.${old_root_domain}:/container/service/slapd/assets/certs:ro

  # LDAP Server management web GUI
  lam:
    image: ldapaccountmanager/lam:stable
    volumes:
      - ${docker_data_folder}/lam/config.cfg:/etc/ldap-account-manager/config.cfg
      - ${docker_data_folder}/lam/lam.conf:/var/lib/ldap-account-manager/config/lam.conf
    environment:
      LAM_SKIP_PRECONFIGURE: "true"
    networks:
      - lam
      - ldap
    depends_on:
      - openldap
    <<: *restart
    <<: *logging
    mem_limit: 100m
    labels:
      <<: *traefik
      traefik.docker.network: lam
      traefik.http.routers.lam.rule: Host(`lam.${root_domain}`)
      # service
      traefik.http.services.lam.loadbalancer.server.port: "80"
      # Forward auth
      traefik.http.routers.lam.middlewares: traefik-forward-auth

  # SSO
  authelia:
    image: authelia/authelia:4.33
    environment:
      # Global configuration
      AUTHELIA_JWT_SECRET: ${AUTHELIA_JWT_SECRET}
      AUTHELIA_DEFAULT_REDIRECTION_URL: https://${root_domain}
      # Notifier configuration
      AUTHELIA_NOTIFIER_SMTP_PASSWORD: ${SENDGRID_PASS}
      AUTHELIA_NOTIFIER_SMTP_SENDER: Authelia <authelia@${root_domain}>
      AUTHELIA_NOTIFIER_SMTP_STARTUP_CHECK_ADDRESS: ${letsencrypt_email}
      # LDAP backend configuration
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_BASE_DN: ${LDAP_BASE_DN}
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_USER: ${LDAP_ADMIN_USER}
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD: ${LDAP_ADMIN_PASSWORD}
      # Session configuration
      AUTHELIA_SESSION_DOMAIN: ${root_domain}
      # Storage configuration
      AUTHELIA_STORAGE_ENCRYPTION_KEY: ${AUTHELIA_DB_ENCRYPTION_KEY}
      AUTHELIA_STORAGE_POSTGRES_PASSWORD: ${AUTHELIA_DB_PASSWORD}
      AUTHELIA_SESSION_SECRET: ${AUTHELIA_SESSION_SECRET}
    command:
      - --config
      - /config/config.yml
    <<: *restart
    <<: *logging
    user: ${UID}:${GID}
    mem_limit: 500m
    depends_on:
      - authelia-db
      - openldap
    volumes:
      - ./config/authelia:/config:ro
    networks:
      - authelia-proxy
      - ldap
      - authelia
    labels:
      <<: *traefik
      traefik.docker.network: authelia-proxy
      traefik.http.routers.authelia.rule: Host(`authelia.${root_domain}`)
      # service
      traefik.http.services.authelia.loadbalancer.server.port: "9091"
      traefik.http.middlewares.authelia.forwardauth.address: http://authelia:9091/api/verify?rd=https://authelia.${root_domain}/'
      traefik.http.middlewares.authelia.forwardauth.trustForwardHeader: "true"
      traefik.http.middlewares.authelia.forwardauth.authResponseHeaders: Remote-User, Remote-Groups, Remote-Name, Remote-Email


  # DB for authelia
  authelia-db:
    <<: *restart
    <<: *logging
    mem_limit: 250m
    environment:
      POSTGRES_USER: authelia
      POSTGRES_PASSWORD: ${AUTHELIA_DB_PASSWORD}
    image: postgres:14-alpine
    volumes:
      - ${docker_data_folder}/authelia-db:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - authelia

  # OIDC forward authentication for traefik
  traefik-forward-auth:
    image: thomseddon/traefik-forward-auth:2
    <<: *restart
    <<: *logging
    mem_limit: 100m
    environment:
      PROVIDERS_GOOGLE_CLIENT_ID: ${OAUTH2_PROXY_CLIENT_ID}
      PROVIDERS_GOOGLE_CLIENT_SECRET: ${OAUTH2_PROXY_CLIENT_SECRET}
      SECRET: ${OAUTH2_PROXY_COOKIE_SECRET}
      #OIDC_ISSUER: https://accounts.google.com
      WHITELIST: "${allowed_emails}"
      AUTH_HOST: "oauth.${root_domain}"
      COOKIE_DOMAIN: "${root_domain}"
      COOKIE_NAME: _google_forward_auth
      CSRF_COOKIE_NAME: _google_forward_auth_csrf
    networks:
      - traefik
    labels:
      <<: *traefik
      # HTTP entrypoint
      traefik.http.routers.traefik-forward-auth.rule: Host(`oauth.${root_domain}`)
      # service
      traefik.http.services.traefik-forward-auth.loadbalancer.server.port: "4181"
      # Forward auth
      traefik.http.middlewares.traefik-forward-auth.forwardauth.address: http://traefik-forward-auth:4181
      traefik.http.routers.traefik-forward-auth.middlewares: traefik-forward-auth
      traefik.http.middlewares.traefik-forward-auth.forwardauth.authResponseHeaders: X-Forwarded-User

networks:
  watchtower:
    driver: bridge
    name: watchtower
  traefik:
    driver: bridge
    name: traefik
  ldap:
    driver: bridge
    internal: true
    name: ldap
  authelia:
    driver: bridge
    internal: true
    name: authelia
  nextcloud:
    driver: bridge
    internal: true
    name: nextcloud
  samba:
    driver: bridge
    name: samba
  ssh:
    driver: bridge
    name: ssh
  calibre-web:
    driver: bridge
    name: calibre-web
  homer:
    driver: bridge
    internal: true
    name: homer
  gollum:
    driver: bridge
    internal: true
    name: gollum
  ghost:
    driver: bridge
    name: ghost
  nextcloud-proxy:
    driver: bridge
    name: nextcloud-proxy
  gotify:
    driver: bridge
    internal: true
    name: gotify
  robots:
    driver: bridge
    internal: true
    name: robots
  netdata:
    driver: bridge
    internal: true
    name: netdata
  lam:
    driver: bridge
    internal: true
    name: lam
  authelia-proxy:
    driver: bridge
    name: authelia-proxy


volumes:
  robots-nginx-cache:
  robots-nginx-pid:
  robots-nginx-conf:
  torrent-blackhole:
